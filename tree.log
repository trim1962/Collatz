
*******************************************************************************
after parsing
$main; Register;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
   (statementn, resultdef = <nil>, pos = (28,36), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (28,2), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = AssignFile(out Text;const RawByteString);
         left =
         (callparan, resultdef = RawByteString = "AnsiString", pos = (28,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (28,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            )

         )
         (callparan, resultdef = Text = "Text", pos = (28,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (28,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_address_taken], cmplx = 1
               nil
               symbol = TFOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (29,21), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (29,6), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Rewrite(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (29,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (29,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (30,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (30,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = AssignFile(out Text;const RawByteString);
         left =
         (callparan, resultdef = RawByteString = "AnsiString", pos = (30,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (30,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            )

         )
         (callparan, resultdef = Text = "Text", pos = (30,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (30,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_address_taken], cmplx = 1
               nil
               symbol = TFCSVOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (31,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (31,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Rewrite(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (31,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (31,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFCSVOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (32,49), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (32,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = AssignFile(out Text;const RawByteString);
         left =
         (callparan, resultdef = RawByteString = "AnsiString", pos = (32,48), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (32,48), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            )

         )
         (callparan, resultdef = Text = "Text", pos = (32,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (32,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_address_taken], cmplx = 1
               nil
               symbol = TFCSVTOPOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (33,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (33,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Rewrite(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (33,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (33,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFCSVTOPOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (34,41), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (34,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Vettori_azzera(var MioType_mioarray;QWord);
         left =
         (callparan, resultdef = QWord = "QWord", pos = (34,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (ordconstn, resultdef = QWord = "QWord", pos = (34,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               value = 1200
            )

         )
         (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (34,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (34,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = CONTATORI
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (35,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (35,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Vettori_azzera(var MioType_mioarray;QWord);
         left =
         (callparan, resultdef = QWord = "QWord", pos = (35,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (ordconstn, resultdef = QWord = "QWord", pos = (35,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               value = 1200
            )

         )
         (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (35,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (35,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TOPCICLO
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (36,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (36,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
         (loadn, resultdef = QWord = "QWord", pos = (36,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = MAXCONTATORE
         )
         (ordconstn, resultdef = QWord = "QWord", pos = (36,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 0
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (54,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (forn, resultdef = $void = "untyped", pos = (37,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (loadn, resultdef = QWord = "QWord", pos = (37,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = M
         )
         (ordconstn, resultdef = QWord = "QWord", pos = (37,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1
         )
         (ordconstn, resultdef = QWord = "QWord", pos = (37,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1200
         )
         (blockn, resultdef = $void = "untyped", pos = (37,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (statementn, resultdef = <nil>, pos = (38,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (assignn, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
                  (loadn, resultdef = QWord = "QWord", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                     nil
                     symbol = N
                  )
                  (loadn, resultdef = QWord = "QWord", pos = (38,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                     nil
                     symbol = M
                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (39,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (assignn, resultdef = $void = "untyped", pos = (39,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                  (loadn, resultdef = QWord = "QWord", pos = (39,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                     nil
                     symbol = CONTATORE
                  )
                  (ordconstn, resultdef = QWord = "QWord", pos = (39,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     value = 0
                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (48,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (whilerepeatn, resultdef = $void = "untyped", pos = (40,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (equaln, resultdef = Boolean = "Boolean", pos = (48,9), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (48,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = N
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (48,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        value = 1
                     )
                  )
                  (blockn, resultdef = $void = "untyped", pos = (48,9), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (statementn, resultdef = <nil>, pos = (44,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        (ifn, resultdef = $void = "untyped", pos = (41,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                           (equaln, resultdef = Boolean = "Boolean", pos = (41,9), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 8
                              (modn, resultdef = QWord = "QWord", pos = (41,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 7
                                 (loadn, resultdef = QWord = "QWord", pos = (41,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    nil
                                    symbol = N
                                 )
                                 (ordconstn, resultdef = QWord = "QWord", pos = (41,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                    value = 2
                                 )
                              )
                              (ordconstn, resultdef = QWord = "QWord", pos = (41,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                 value = 0
                              )
                           )
                           (assignn, resultdef = $void = "untyped", pos = (42,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 9
                              (loadn, resultdef = QWord = "QWord", pos = (42,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                                 nil
                                 symbol = N
                              )
                              (divn, resultdef = QWord = "QWord", pos = (42,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 7
                                 (loadn, resultdef = QWord = "QWord", pos = (42,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    nil
                                    symbol = N
                                 )
                                 (ordconstn, resultdef = QWord = "QWord", pos = (42,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                    value = 2
                                 )
                              )
                           )
                           (assignn, resultdef = $void = "untyped", pos = (44,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 10
                              (loadn, resultdef = QWord = "QWord", pos = (44,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                                 nil
                                 symbol = N
                              )
                              (addn, resultdef = QWord = "QWord", pos = (44,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 8
                                 (muln, resultdef = QWord = "QWord", pos = (44,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 7
                                    (ordconstn, resultdef = QWord = "QWord", pos = (44,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                       value = 3
                                    )
                                    (loadn, resultdef = QWord = "QWord", pos = (44,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                       nil
                                       symbol = N
                                    )
                                 )
                                 (ordconstn, resultdef = QWord = "QWord", pos = (44,17), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                    value = 1
                                 )
                              )
                           )
                           nil
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (45,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        (blockn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                           (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                              (nothingn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                              (tempcreaten, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                 size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EDEC2C0
                                 [ti_may_be_in_reg]
                                 tempinit =
                                 nil
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                              (assignn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                 (temprefn, resultdef = Pointer = "^untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                                    temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC2C0 flags = [ti_may_be_in_reg])
                                 )
                                 (typeconvn, resultdef = Pointer = "^untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255, convtype = tc_equal, convnodeflags = []
                                    (calln, resultdef = PText = "^Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                       proc = $fpc_get_output:^Text;
                                    )
                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                              (calln, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                 proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                                 left =
                                 (callparan, resultdef = ShortString = "ShortString", pos = (45,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    (stringconstn, resultdef = ShortString = "ShortString", pos = (45,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    )

                                 )
                                 (callparan, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    (typeconvn, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                       (derefn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                          (temprefn, resultdef = Pointer = "^untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                             temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC2C0 flags = [ti_may_be_in_reg])
                                          )
                                       )
                                    )

                                 )
                                 (callparan, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    (ordconstn, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                       value = 0
                                    )

                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                              (calln, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                 proc = $fpc_write_text_char(LongInt;var Text;Char);
                                 left =
                                 (callparan, resultdef = Char = "Char", pos = (45,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    (ordconstn, resultdef = Char = "Char", pos = (45,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                       value = 32
                                    )

                                 )
                                 (callparan, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    (typeconvn, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                       (derefn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                          (temprefn, resultdef = Pointer = "^untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                             temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC2C0 flags = [ti_may_be_in_reg])
                                          )
                                       )
                                    )

                                 )
                                 (callparan, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    (ordconstn, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                       value = 0
                                    )

                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                              (calln, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                 proc = $fpc_write_text_uint(LongInt;var Text;QWord);
                                 left =
                                 (callparan, resultdef = QWord = "QWord", pos = (45,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                    (loadn, resultdef = QWord = "QWord", pos = (45,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                       nil
                                       symbol = M
                                    )

                                 )
                                 (callparan, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    (typeconvn, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                       (derefn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                          (temprefn, resultdef = Pointer = "^untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                             temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC2C0 flags = [ti_may_be_in_reg])
                                          )
                                       )
                                    )

                                 )
                                 (callparan, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    (ordconstn, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                       value = 0
                                    )

                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                              (calln, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                 proc = $fpc_write_text_char(LongInt;var Text;Char);
                                 left =
                                 (callparan, resultdef = Char = "Char", pos = (45,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    (ordconstn, resultdef = Char = "Char", pos = (45,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                       value = 32
                                    )

                                 )
                                 (callparan, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    (typeconvn, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                       (derefn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                          (temprefn, resultdef = Pointer = "^untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                             temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC2C0 flags = [ti_may_be_in_reg])
                                          )
                                       )
                                    )

                                 )
                                 (callparan, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    (ordconstn, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                       value = 0
                                    )

                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                              (calln, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                 proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                                 left =
                                 (callparan, resultdef = ShortString = "ShortString", pos = (45,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    (stringconstn, resultdef = ShortString = "ShortString", pos = (45,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    )

                                 )
                                 (callparan, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    (typeconvn, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                       (derefn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                          (temprefn, resultdef = Pointer = "^untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                             temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC2C0 flags = [ti_may_be_in_reg])
                                          )
                                       )
                                    )

                                 )
                                 (callparan, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    (ordconstn, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                       value = 0
                                    )

                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                              (calln, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                 proc = $fpc_write_text_uint(LongInt;var Text;QWord);
                                 left =
                                 (callparan, resultdef = QWord = "QWord", pos = (45,37), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                    (loadn, resultdef = QWord = "QWord", pos = (45,37), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                       nil
                                       symbol = N
                                    )

                                 )
                                 (callparan, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    (typeconvn, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                       (derefn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                          (temprefn, resultdef = Pointer = "^untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                             temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC2C0 flags = [ti_may_be_in_reg])
                                          )
                                       )
                                    )

                                 )
                                 (callparan, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    (ordconstn, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                       value = 0
                                    )

                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                              (calln, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                 proc = $fpc_writeln_end(var Text);
                                 left =
                                 (callparan, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    (typeconvn, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                       (derefn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                          (temprefn, resultdef = Pointer = "^untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                             temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC2C0 flags = [ti_may_be_in_reg])
                                          )
                                       )
                                    )

                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                              (tempdeleten, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                 release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EDEC2C0
                              )

                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (46,31), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        (assignn, resultdef = $void = "untyped", pos = (46,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
                           (loadn, resultdef = QWord = "QWord", pos = (46,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                              nil
                              symbol = CONTATORE
                           )
                           (addn, resultdef = QWord = "QWord", pos = (46,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                              (loadn, resultdef = QWord = "QWord", pos = (46,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                 nil
                                 symbol = CONTATORE
                              )
                              (ordconstn, resultdef = QWord = "QWord", pos = (46,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                 value = 1
                              )
                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (47,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        (ifn, resultdef = $void = "untyped", pos = (47,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                           (gtn, resultdef = Boolean = "Boolean", pos = (47,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
                              (loadn, resultdef = QWord = "QWord", pos = (47,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                 nil
                                 symbol = N
                              )
                              (vecn, resultdef = QWord = "QWord", pos = (47,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                 (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (47,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    nil
                                    symbol = TOPCICLO
                                 )
                                 (typeconvn, resultdef = <no type symbol> = "QWord", pos = (47,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                    (loadn, resultdef = QWord = "QWord", pos = (47,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                       nil
                                       symbol = M
                                    )
                                 )
                              )
                           )
                           (assignn, resultdef = $void = "untyped", pos = (47,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
                              (vecn, resultdef = QWord = "QWord", pos = (47,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_callunique], cmplx = 2
                                 (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (47,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                                    nil
                                    symbol = TOPCICLO
                                 )
                                 (typeconvn, resultdef = <no type symbol> = "QWord", pos = (47,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                    (loadn, resultdef = QWord = "QWord", pos = (47,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                       nil
                                       symbol = M
                                    )
                                 )
                              )
                              (loadn, resultdef = QWord = "QWord", pos = (47,43), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                 nil
                                 symbol = N
                              )
                           )
                           nil
                           nil
                        )

                     )
                  )
                  nil
                  nil
               )

            )
            (statementn, resultdef = <nil>, pos = (49,60), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (ifn, resultdef = $void = "untyped", pos = (49,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (gtn, resultdef = Boolean = "Boolean", pos = (49,17), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
                     (loadn, resultdef = QWord = "QWord", pos = (49,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = CONTATORE
                     )
                     (loadn, resultdef = QWord = "QWord", pos = (49,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = MAXCONTATORE
                     )
                  )
                  (assignn, resultdef = $void = "untyped", pos = (49,37), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
                     (loadn, resultdef = QWord = "QWord", pos = (49,37), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                        nil
                        symbol = MAXCONTATORE
                     )
                     (loadn, resultdef = QWord = "QWord", pos = (49,51), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = CONTATORE
                     )
                  )
                  nil
                  nil
               )

            )
            (statementn, resultdef = <nil>, pos = (50,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (blockn, resultdef = $void = "untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (statementn, resultdef = <nil>, pos = (50,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (nothingn, resultdef = $void = "untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (50,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (tempcreaten, resultdef = $void = "untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EDEC340
                        [ti_may_be_in_reg]
                        tempinit =
                        nil
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (50,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (assignn, resultdef = $void = "untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        (temprefn, resultdef = Pointer = "^untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                           temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC340 flags = [ti_may_be_in_reg])
                        )
                        (typeconvn, resultdef = Pointer = "^untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255, convtype = tc_equal, convnodeflags = []
                           (calln, resultdef = PText = "^Text", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                              proc = $fpc_get_output:^Text;
                           )
                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (50,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        proc = $fpc_writeln_end(var Text);
                        left =
                        (callparan, resultdef = Text = "Text", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (typeconvn, resultdef = Text = "Text", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                              (derefn, resultdef = $void = "untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                 (temprefn, resultdef = Pointer = "^untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC340 flags = [ti_may_be_in_reg])
                                 )
                              )
                           )

                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (50,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     (tempdeleten, resultdef = $void = "untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EDEC340
                     )

                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (51,51), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (blockn, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (nothingn, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (tempcreaten, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EDEC3C0
                        [ti_may_be_in_reg]
                        tempinit =
                        nil
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (assignn, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        (temprefn, resultdef = Pointer = "^untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                           temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC3C0 flags = [ti_may_be_in_reg])
                        )
                        (typeconvn, resultdef = Pointer = "^untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255, convtype = tc_equal, convnodeflags = []
                           (calln, resultdef = PText = "^Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                              proc = $fpc_get_output:^Text;
                           )
                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                        left =
                        (callparan, resultdef = ShortString = "ShortString", pos = (51,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (stringconstn, resultdef = ShortString = "ShortString", pos = (51,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           )

                        )
                        (callparan, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (typeconvn, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                              (derefn, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                 (temprefn, resultdef = Pointer = "^untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC3C0 flags = [ti_may_be_in_reg])
                                 )
                              )
                           )

                        )
                        (callparan, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (ordconstn, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                              value = 0
                           )

                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        proc = $fpc_write_text_uint(LongInt;var Text;QWord);
                        left =
                        (callparan, resultdef = QWord = "QWord", pos = (51,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                           (loadn, resultdef = QWord = "QWord", pos = (51,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                              nil
                              symbol = M
                           )

                        )
                        (callparan, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (typeconvn, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                              (derefn, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                 (temprefn, resultdef = Pointer = "^untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC3C0 flags = [ti_may_be_in_reg])
                                 )
                              )
                           )

                        )
                        (callparan, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (ordconstn, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                              value = 0
                           )

                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        proc = $fpc_write_text_char(LongInt;var Text;Char);
                        left =
                        (callparan, resultdef = Char = "Char", pos = (51,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (ordconstn, resultdef = Char = "Char", pos = (51,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                              value = 32
                           )

                        )
                        (callparan, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (typeconvn, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                              (derefn, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                 (temprefn, resultdef = Pointer = "^untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC3C0 flags = [ti_may_be_in_reg])
                                 )
                              )
                           )

                        )
                        (callparan, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (ordconstn, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                              value = 0
                           )

                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                        left =
                        (callparan, resultdef = ShortString = "ShortString", pos = (51,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (stringconstn, resultdef = ShortString = "ShortString", pos = (51,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           )

                        )
                        (callparan, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (typeconvn, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                              (derefn, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                 (temprefn, resultdef = Pointer = "^untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC3C0 flags = [ti_may_be_in_reg])
                                 )
                              )
                           )

                        )
                        (callparan, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (ordconstn, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                              value = 0
                           )

                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        proc = $fpc_write_text_uint(LongInt;var Text;QWord);
                        left =
                        (callparan, resultdef = QWord = "QWord", pos = (51,50), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                           (loadn, resultdef = QWord = "QWord", pos = (51,50), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                              nil
                              symbol = CONTATORE
                           )

                        )
                        (callparan, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (typeconvn, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                              (derefn, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                 (temprefn, resultdef = Pointer = "^untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC3C0 flags = [ti_may_be_in_reg])
                                 )
                              )
                           )

                        )
                        (callparan, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (ordconstn, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                              value = 0
                           )

                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        proc = $fpc_writeln_end(var Text);
                        left =
                        (callparan, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (typeconvn, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                              (derefn, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                 (temprefn, resultdef = Pointer = "^untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC3C0 flags = [ti_may_be_in_reg])
                                 )
                              )
                           )

                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     (tempdeleten, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EDEC3C0
                     )

                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (52,49), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 10
               (assignn, resultdef = $void = "untyped", pos = (52,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 6
                  (vecn, resultdef = QWord = "QWord", pos = (52,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_callunique], cmplx = 2
                     (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (52,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                        nil
                        symbol = CONTATORI
                     )
                     (typeconvn, resultdef = <no type symbol> = "QWord", pos = (52,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                        (loadn, resultdef = QWord = "QWord", pos = (52,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           nil
                           symbol = CONTATORE
                        )
                     )
                  )
                  (addn, resultdef = QWord = "QWord", pos = (52,47), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
                     (vecn, resultdef = QWord = "QWord", pos = (52,36), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                        (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (52,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           nil
                           symbol = CONTATORI
                        )
                        (typeconvn, resultdef = <no type symbol> = "QWord", pos = (52,37), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                           (loadn, resultdef = QWord = "QWord", pos = (52,37), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                              nil
                              symbol = CONTATORE
                           )
                        )
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (52,48), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        value = 1
                     )
                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (53,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
               (assignn, resultdef = $void = "untyped", pos = (53,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
                  (vecn, resultdef = QWord = "QWord", pos = (53,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_callunique], cmplx = 2
                     (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (53,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                        nil
                        symbol = NUMERI
                     )
                     (typeconvn, resultdef = <no type symbol> = "QWord", pos = (53,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                        (loadn, resultdef = QWord = "QWord", pos = (53,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           nil
                           symbol = M
                        )
                     )
                  )
                  (loadn, resultdef = QWord = "QWord", pos = (53,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                     nil
                     symbol = CONTATORE
                  )
               )

            )
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (58,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (58,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
         (loadn, resultdef = QWord = "QWord", pos = (58,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = M
         )
         (ordconstn, resultdef = QWord = "QWord", pos = (58,6), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (59,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (59,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Stampa_stampauno_Semplificata(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (59,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (59,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (64,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (whilerepeatn, resultdef = $void = "untyped", pos = (60,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (lten, resultdef = Boolean = "Boolean", pos = (60,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = QWord = "QWord", pos = (60,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
               nil
               symbol = M
            )
            (ordconstn, resultdef = QWord = "QWord", pos = (60,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               value = 1200
            )
         )
         (blockn, resultdef = $void = "untyped", pos = (61,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (statementn, resultdef = <nil>, pos = (62,58), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (calln, resultdef = $void = "untyped", pos = (62,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  proc = Stampa_stampalinea_Semplificata(var Text;var QWord;var MioType_mioarray);
                  left =
                  (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (62,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (62,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = NUMERI
                     )

                  )
                  (callparan, resultdef = QWord = "QWord", pos = (62,50), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (62,50), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = M
                     )

                  )
                  (callparan, resultdef = Text = "Text", pos = (62,48), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = Text = "Text", pos = (62,48), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = TFOUT
                     )

                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (63,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
               (assignn, resultdef = $void = "untyped", pos = (63,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
                  (loadn, resultdef = QWord = "QWord", pos = (63,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                     nil
                     symbol = M
                  )
                  (addn, resultdef = QWord = "QWord", pos = (63,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (63,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = M
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (63,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        value = 12
                     )
                  )
               )

            )
         )
         nil
         nil
      )

   )
   (statementn, resultdef = <nil>, pos = (65,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (65,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Stampa_chiusuralong(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (65,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (65,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (66,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (66,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Stampa_stampadue(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (66,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (66,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (67,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (67,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
         (loadn, resultdef = QWord = "QWord", pos = (67,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = M
         )
         (ordconstn, resultdef = QWord = "QWord", pos = (67,6), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (72,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (whilerepeatn, resultdef = $void = "untyped", pos = (68,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (lten, resultdef = Boolean = "Boolean", pos = (68,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
            (loadn, resultdef = QWord = "QWord", pos = (68,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
               nil
               symbol = M
            )
            (loadn, resultdef = QWord = "QWord", pos = (68,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
               nil
               symbol = MAXCONTATORE
            )
         )
         (blockn, resultdef = $void = "untyped", pos = (69,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (statementn, resultdef = <nil>, pos = (70,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (calln, resultdef = $void = "untyped", pos = (70,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  proc = Stampa_stampalinea(var Text;var QWord;var MioType_mioarray);
                  left =
                  (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (70,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (70,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = CONTATORI
                     )

                  )
                  (callparan, resultdef = QWord = "QWord", pos = (70,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (70,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = M
                     )

                  )
                  (callparan, resultdef = Text = "Text", pos = (70,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = Text = "Text", pos = (70,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = TFOUT
                     )

                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (71,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
               (assignn, resultdef = $void = "untyped", pos = (71,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
                  (loadn, resultdef = QWord = "QWord", pos = (71,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                     nil
                     symbol = M
                  )
                  (addn, resultdef = QWord = "QWord", pos = (71,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (71,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = M
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (71,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        value = 6
                     )
                  )
               )

            )
         )
         nil
         nil
      )

   )
   (statementn, resultdef = <nil>, pos = (73,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (73,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Stampa_chiusuralong(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (73,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (73,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (74,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (74,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Stampa_stampatre(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (74,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (74,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (75,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (75,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
         (loadn, resultdef = QWord = "QWord", pos = (75,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = M
         )
         (ordconstn, resultdef = QWord = "QWord", pos = (75,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (80,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (whilerepeatn, resultdef = $void = "untyped", pos = (76,2), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (lten, resultdef = Boolean = "Boolean", pos = (76,9), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = QWord = "QWord", pos = (76,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
               nil
               symbol = M
            )
            (ordconstn, resultdef = QWord = "QWord", pos = (76,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               value = 1200
            )
         )
         (blockn, resultdef = $void = "untyped", pos = (77,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (statementn, resultdef = <nil>, pos = (78,46), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (calln, resultdef = $void = "untyped", pos = (78,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  proc = Stampa_stampalinea(var Text;var QWord;var MioType_mioarray);
                  left =
                  (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (78,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (78,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = TOPCICLO
                     )

                  )
                  (callparan, resultdef = QWord = "QWord", pos = (78,36), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (78,36), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = M
                     )

                  )
                  (callparan, resultdef = Text = "Text", pos = (78,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = Text = "Text", pos = (78,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = TFOUT
                     )

                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (79,17), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
               (assignn, resultdef = $void = "untyped", pos = (79,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
                  (loadn, resultdef = QWord = "QWord", pos = (79,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                     nil
                     symbol = M
                  )
                  (addn, resultdef = QWord = "QWord", pos = (79,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (79,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = M
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (79,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        value = 6
                     )
                  )
               )

            )
         )
         nil
         nil
      )

   )
   (statementn, resultdef = <nil>, pos = (81,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (81,2), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Stampa_chiusuralong(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (81,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (81,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (82,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (82,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
         (loadn, resultdef = QWord = "QWord", pos = (82,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = N
         )
         (ordconstn, resultdef = QWord = "QWord", pos = (82,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (87,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (whilerepeatn, resultdef = $void = "untyped", pos = (83,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (lten, resultdef = Boolean = "Boolean", pos = (83,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
            (loadn, resultdef = QWord = "QWord", pos = (83,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
               nil
               symbol = N
            )
            (loadn, resultdef = QWord = "QWord", pos = (83,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
               nil
               symbol = MAXCONTATORE
            )
         )
         (blockn, resultdef = $void = "untyped", pos = (84,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (statementn, resultdef = <nil>, pos = (85,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (calln, resultdef = $void = "untyped", pos = (85,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  proc = Stampa_stampacsv(var Text;var QWord;var MioType_mioarray);
                  left =
                  (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (85,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (85,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = CONTATORI
                     )

                  )
                  (callparan, resultdef = QWord = "QWord", pos = (85,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (85,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = N
                     )

                  )
                  (callparan, resultdef = Text = "Text", pos = (85,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = Text = "Text", pos = (85,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = TFCSVOUT
                     )

                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (86,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
               (assignn, resultdef = $void = "untyped", pos = (86,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
                  (loadn, resultdef = QWord = "QWord", pos = (86,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                     nil
                     symbol = N
                  )
                  (addn, resultdef = QWord = "QWord", pos = (86,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (86,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = N
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (86,6), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        value = 1
                     )
                  )
               )

            )
         )
         nil
         nil
      )

   )
   (statementn, resultdef = <nil>, pos = (88,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (88,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
         (loadn, resultdef = QWord = "QWord", pos = (88,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = N
         )
         (ordconstn, resultdef = QWord = "QWord", pos = (88,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (93,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (whilerepeatn, resultdef = $void = "untyped", pos = (89,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (lten, resultdef = Boolean = "Boolean", pos = (89,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = QWord = "QWord", pos = (89,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
               nil
               symbol = N
            )
            (ordconstn, resultdef = QWord = "QWord", pos = (89,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               value = 1200
            )
         )
         (blockn, resultdef = $void = "untyped", pos = (90,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (statementn, resultdef = <nil>, pos = (91,41), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (calln, resultdef = $void = "untyped", pos = (91,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  proc = Stampa_stampacsv(var Text;var QWord;var MioType_mioarray);
                  left =
                  (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (91,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (91,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = TOPCICLO
                     )

                  )
                  (callparan, resultdef = QWord = "QWord", pos = (91,31), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (91,31), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = N
                     )

                  )
                  (callparan, resultdef = Text = "Text", pos = (91,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = Text = "Text", pos = (91,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = TFCSVTOPOUT
                     )

                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (92,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
               (assignn, resultdef = $void = "untyped", pos = (92,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
                  (loadn, resultdef = QWord = "QWord", pos = (92,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                     nil
                     symbol = N
                  )
                  (addn, resultdef = QWord = "QWord", pos = (92,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (92,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = N
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (92,6), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        value = 1
                     )
                  )
               )

            )
         )
         nil
         nil
      )

   )
   (statementn, resultdef = <nil>, pos = (95,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (tempcreaten, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EDEC440
               [ti_may_be_in_reg]
               tempinit =
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (assignn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (temprefn, resultdef = Pointer = "^untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                  temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC440 flags = [ti_may_be_in_reg])
               )
               (typeconvn, resultdef = Pointer = "^untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255, convtype = tc_equal, convnodeflags = []
                  (calln, resultdef = PText = "^Text", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     proc = $fpc_get_output:^Text;
                  )
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
               left =
               (callparan, resultdef = ShortString = "ShortString", pos = (95,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (stringconstn, resultdef = ShortString = "ShortString", pos = (95,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  )

               )
               (callparan, resultdef = Text = "Text", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (typeconvn, resultdef = Text = "Text", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                     (derefn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (temprefn, resultdef = Pointer = "^untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC440 flags = [ti_may_be_in_reg])
                        )
                     )
                  )

               )
               (callparan, resultdef = LongInt = "LongInt", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (ordconstn, resultdef = LongInt = "LongInt", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     value = 0
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               proc = $fpc_write_text_uint(LongInt;var Text;QWord);
               left =
               (callparan, resultdef = QWord = "QWord", pos = (95,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                  (loadn, resultdef = QWord = "QWord", pos = (95,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                     nil
                     symbol = MAXCONTATORE
                  )

               )
               (callparan, resultdef = Text = "Text", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (typeconvn, resultdef = Text = "Text", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                     (derefn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (temprefn, resultdef = Pointer = "^untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC440 flags = [ti_may_be_in_reg])
                        )
                     )
                  )

               )
               (callparan, resultdef = LongInt = "LongInt", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (ordconstn, resultdef = LongInt = "LongInt", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     value = 0
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               proc = $fpc_writeln_end(var Text);
               left =
               (callparan, resultdef = Text = "Text", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (typeconvn, resultdef = Text = "Text", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                     (derefn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (temprefn, resultdef = Pointer = "^untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC440 flags = [ti_may_be_in_reg])
                        )
                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            (tempdeleten, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EDEC440
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (97,50), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (forn, resultdef = $void = "untyped", pos = (97,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (loadn, resultdef = QWord = "QWord", pos = (97,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = N
         )
         (ordconstn, resultdef = QWord = "QWord", pos = (97,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1
         )
         (ordconstn, resultdef = QWord = "QWord", pos = (97,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1200
         )
         (assignn, resultdef = $void = "untyped", pos = (97,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 5
            (vecn, resultdef = QWord = "QWord", pos = (97,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_callunique], cmplx = 2
               (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (97,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                  nil
                  symbol = VETT
               )
               (typeconvn, resultdef = <no type symbol> = "QWord", pos = (97,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                  (loadn, resultdef = QWord = "QWord", pos = (97,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                     nil
                     symbol = N
                  )
               )
            )
            (vecn, resultdef = QWord = "QWord", pos = (97,47), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
               (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (97,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  nil
                  symbol = TOPCICLO
               )
               (typeconvn, resultdef = <no type symbol> = "QWord", pos = (97,48), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                  (loadn, resultdef = QWord = "QWord", pos = (97,48), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                     nil
                     symbol = N
                  )
               )
            )
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (98,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (98,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Vettori_boubledec(var MioType_mioarray);
         left =
         (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (98,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (98,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = VETT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (99,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (99,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Vettori_azzeradoppivet(var MioType_mioarray);
         left =
         (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (99,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (99,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = VETT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (100,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (100,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Vettori_boublecre(var MioType_mioarray);
         left =
         (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (100,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (100,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = VETT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (101,9), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (101,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
         (loadn, resultdef = QWord = "QWord", pos = (101,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = IM
         )
         (ordconstn, resultdef = QWord = "QWord", pos = (101,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (109,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (forn, resultdef = $void = "untyped", pos = (102,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (loadn, resultdef = QWord = "QWord", pos = (102,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = I
         )
         (ordconstn, resultdef = QWord = "QWord", pos = (102,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1
         )
         (ordconstn, resultdef = QWord = "QWord", pos = (102,17), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1200
         )
         (blockn, resultdef = $void = "untyped", pos = (103,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (statementn, resultdef = <nil>, pos = (108,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (ifn, resultdef = $void = "untyped", pos = (104,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (unequaln, resultdef = Boolean = "Boolean", pos = (104,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
                     (vecn, resultdef = QWord = "QWord", pos = (104,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                        (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (104,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           nil
                           symbol = VETT
                        )
                        (typeconvn, resultdef = <no type symbol> = "QWord", pos = (104,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                           (loadn, resultdef = QWord = "QWord", pos = (104,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                              nil
                              symbol = I
                           )
                        )
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (104,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        value = 0
                     )
                  )
                  (blockn, resultdef = $void = "untyped", pos = (105,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 9
                     (statementn, resultdef = <nil>, pos = (106,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 9
                        (assignn, resultdef = $void = "untyped", pos = (106,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 5
                           (vecn, resultdef = QWord = "QWord", pos = (106,21), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_callunique], cmplx = 2
                              (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (106,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                                 nil
                                 symbol = MAXCICLO
                              )
                              (typeconvn, resultdef = <no type symbol> = "QWord", pos = (106,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                 (loadn, resultdef = QWord = "QWord", pos = (106,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    nil
                                    symbol = IM
                                 )
                              )
                           )
                           (vecn, resultdef = QWord = "QWord", pos = (106,31), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                              (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (106,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                 nil
                                 symbol = VETT
                              )
                              (typeconvn, resultdef = <no type symbol> = "QWord", pos = (106,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                 (loadn, resultdef = QWord = "QWord", pos = (106,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    nil
                                    symbol = I
                                 )
                              )
                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (107,21), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
                        (assignn, resultdef = $void = "untyped", pos = (107,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
                           (loadn, resultdef = QWord = "QWord", pos = (107,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                              nil
                              symbol = IM
                           )
                           (addn, resultdef = QWord = "QWord", pos = (107,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                              (loadn, resultdef = QWord = "QWord", pos = (107,17), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                 nil
                                 symbol = IM
                              )
                              (ordconstn, resultdef = QWord = "QWord", pos = (107,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                 value = 1
                              )
                           )
                        )

                     )
                  )
                  nil
                  nil
               )

            )
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (110,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (110,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
         (loadn, resultdef = QWord = "QWord", pos = (110,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = IM
         )
         (subn, resultdef = QWord = "QWord", pos = (110,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = QWord = "QWord", pos = (110,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
               nil
               symbol = IM
            )
            (ordconstn, resultdef = QWord = "QWord", pos = (110,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
               value = 1
            )
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (111,31), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (111,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Stampa_stampaquattro(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (111,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (111,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (112,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (112,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
         (loadn, resultdef = QWord = "QWord", pos = (112,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = M
         )
         (ordconstn, resultdef = QWord = "QWord", pos = (112,6), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (117,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (whilerepeatn, resultdef = $void = "untyped", pos = (113,2), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (lten, resultdef = Boolean = "Boolean", pos = (113,9), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
            (loadn, resultdef = QWord = "QWord", pos = (113,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
               nil
               symbol = M
            )
            (loadn, resultdef = QWord = "QWord", pos = (113,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
               nil
               symbol = IM
            )
         )
         (blockn, resultdef = $void = "untyped", pos = (114,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (statementn, resultdef = <nil>, pos = (115,65), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (calln, resultdef = $void = "untyped", pos = (115,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  proc = Stampa_stampalinea_Semplificatanozero(var Text;var QWord;var MioType_mioarray);
                  left =
                  (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (115,64), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (115,64), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = MAXCICLO
                     )

                  )
                  (callparan, resultdef = QWord = "QWord", pos = (115,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (115,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = M
                     )

                  )
                  (callparan, resultdef = Text = "Text", pos = (115,53), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = Text = "Text", pos = (115,53), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = TFOUT
                     )

                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (116,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
               (assignn, resultdef = $void = "untyped", pos = (116,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
                  (loadn, resultdef = QWord = "QWord", pos = (116,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                     nil
                     symbol = M
                  )
                  (addn, resultdef = QWord = "QWord", pos = (116,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (116,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = M
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (116,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        value = 12
                     )
                  )
               )

            )
         )
         nil
         nil
      )

   )
   (statementn, resultdef = <nil>, pos = (118,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (118,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Stampa_chiusuralong(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (118,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (118,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (120,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (120,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
         (loadn, resultdef = QWord = "QWord", pos = (120,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = I
         )
         (ordconstn, resultdef = QWord = "QWord", pos = (120,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (121,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (121,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
         (loadn, resultdef = QWord = "QWord", pos = (121,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = N
         )
         (ordconstn, resultdef = QWord = "QWord", pos = (121,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (122,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (122,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
         (loadn, resultdef = AnsiString = "AnsiString", pos = (122,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = LINEA
         )
         (stringconstn, resultdef = AnsiString = "AnsiString", pos = (122,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (124,21), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (123,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               proc = AppendStr(var AnsiString;const AnsiString);
               left =
               (callparan, resultdef = AnsiString = "AnsiString", pos = (124,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  )

               )
               (callparan, resultdef = AnsiString = "AnsiString", pos = (124,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                  (loadn, resultdef = AnsiString = "AnsiString", pos = (124,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                     nil
                     symbol = LINEA
                  )

               )
            )

         )
         (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               proc = AppendStr(var AnsiString;const AnsiString);
               left =
               (callparan, resultdef = AnsiString = "AnsiString", pos = (124,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  )

               )
               (callparan, resultdef = AnsiString = "AnsiString", pos = (124,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                  (loadn, resultdef = AnsiString = "AnsiString", pos = (124,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                     nil
                     symbol = LINEA
                  )

               )
            )

         )
         (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               proc = AppendStr(var AnsiString;const AnsiString);
               left =
               (callparan, resultdef = AnsiString = "AnsiString", pos = (124,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  )

               )
               (callparan, resultdef = AnsiString = "AnsiString", pos = (124,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                  (loadn, resultdef = AnsiString = "AnsiString", pos = (124,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                     nil
                     symbol = LINEA
                  )

               )
            )

         )
         (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               proc = AppendStr(var AnsiString;const AnsiString);
               left =
               (callparan, resultdef = AnsiString = "AnsiString", pos = (124,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  )

               )
               (callparan, resultdef = AnsiString = "AnsiString", pos = (124,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                  (loadn, resultdef = AnsiString = "AnsiString", pos = (124,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                     nil
                     symbol = LINEA
                  )

               )
            )

         )
         (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               proc = AppendStr(var AnsiString;const AnsiString);
               left =
               (callparan, resultdef = AnsiString = "AnsiString", pos = (124,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  )

               )
               (callparan, resultdef = AnsiString = "AnsiString", pos = (124,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                  (loadn, resultdef = AnsiString = "AnsiString", pos = (124,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                     nil
                     symbol = LINEA
                  )

               )
            )

         )
         (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               proc = AppendStr(var AnsiString;const AnsiString);
               left =
               (callparan, resultdef = AnsiString = "AnsiString", pos = (124,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  )

               )
               (callparan, resultdef = AnsiString = "AnsiString", pos = (124,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                  (loadn, resultdef = AnsiString = "AnsiString", pos = (124,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                     nil
                     symbol = LINEA
                  )

               )
            )

         )
         (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               proc = AppendStr(var AnsiString;const AnsiString);
               left =
               (callparan, resultdef = AnsiString = "AnsiString", pos = (124,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  )

               )
               (callparan, resultdef = AnsiString = "AnsiString", pos = (124,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                  (loadn, resultdef = AnsiString = "AnsiString", pos = (124,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                     nil
                     symbol = LINEA
                  )

               )
            )

         )
         (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               proc = AppendStr(var AnsiString;const AnsiString);
               left =
               (callparan, resultdef = AnsiString = "AnsiString", pos = (124,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  )

               )
               (callparan, resultdef = AnsiString = "AnsiString", pos = (124,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                  (loadn, resultdef = AnsiString = "AnsiString", pos = (124,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                     nil
                     symbol = LINEA
                  )

               )
            )

         )
         (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               proc = AppendStr(var AnsiString;const AnsiString);
               left =
               (callparan, resultdef = AnsiString = "AnsiString", pos = (124,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  )

               )
               (callparan, resultdef = AnsiString = "AnsiString", pos = (124,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                  (loadn, resultdef = AnsiString = "AnsiString", pos = (124,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                     nil
                     symbol = LINEA
                  )

               )
            )

         )
         (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               proc = AppendStr(var AnsiString;const AnsiString);
               left =
               (callparan, resultdef = AnsiString = "AnsiString", pos = (124,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  )

               )
               (callparan, resultdef = AnsiString = "AnsiString", pos = (124,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                  (loadn, resultdef = AnsiString = "AnsiString", pos = (124,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                     nil
                     symbol = LINEA
                  )

               )
            )

         )
         (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               proc = AppendStr(var AnsiString;const AnsiString);
               left =
               (callparan, resultdef = AnsiString = "AnsiString", pos = (124,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  )

               )
               (callparan, resultdef = AnsiString = "AnsiString", pos = (124,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                  (loadn, resultdef = AnsiString = "AnsiString", pos = (124,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
                     nil
                     symbol = LINEA
                  )

               )
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (125,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (125,2), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = AppendStr(var AnsiString;const AnsiString);
         left =
         (callparan, resultdef = AnsiString = "AnsiString", pos = (125,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (125,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            )

         )
         (callparan, resultdef = AnsiString = "AnsiString", pos = (125,17), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = AnsiString = "AnsiString", pos = (125,17), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = LINEA
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (126,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (126,2), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Stampa_stampacinque(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (126,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (126,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (151,4), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (whilerepeatn, resultdef = $void = "untyped", pos = (127,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (lten, resultdef = Boolean = "Boolean", pos = (127,9), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
            (loadn, resultdef = QWord = "QWord", pos = (127,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
               nil
               symbol = I
            )
            (loadn, resultdef = QWord = "QWord", pos = (127,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
               nil
               symbol = IM
            )
         )
         (blockn, resultdef = $void = "untyped", pos = (128,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (statementn, resultdef = <nil>, pos = (129,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (blockn, resultdef = $void = "untyped", pos = (129,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (statementn, resultdef = <nil>, pos = (129,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (nothingn, resultdef = $void = "untyped", pos = (129,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (129,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (129,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                        left =
                        (callparan, resultdef = ShortString = "ShortString", pos = (129,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (stringconstn, resultdef = ShortString = "ShortString", pos = (129,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           )

                        )
                        (callparan, resultdef = Text = "Text", pos = (129,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                           (loadn, resultdef = Text = "Text", pos = (129,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify], cmplx = 1
                              nil
                              symbol = TFOUT
                           )

                        )
                        (callparan, resultdef = LongInt = "LongInt", pos = (129,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (ordconstn, resultdef = LongInt = "LongInt", pos = (129,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                              value = 0
                           )

                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (129,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (129,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        proc = $fpc_writeln_end(var Text);
                        left =
                        (callparan, resultdef = Text = "Text", pos = (129,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                           (loadn, resultdef = Text = "Text", pos = (129,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify], cmplx = 1
                              nil
                              symbol = TFOUT
                           )

                        )
                     )

                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (130,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (blockn, resultdef = $void = "untyped", pos = (130,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (statementn, resultdef = <nil>, pos = (130,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (nothingn, resultdef = $void = "untyped", pos = (130,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (130,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (130,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        proc = $fpc_write_text_uint(LongInt;var Text;QWord);
                        left =
                        (callparan, resultdef = QWord = "QWord", pos = (130,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 3
                           (vecn, resultdef = QWord = "QWord", pos = (130,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                              (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (130,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                 nil
                                 symbol = MAXCICLO
                              )
                              (typeconvn, resultdef = <no type symbol> = "QWord", pos = (130,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                 (loadn, resultdef = QWord = "QWord", pos = (130,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    nil
                                    symbol = I
                                 )
                              )
                           )

                        )
                        (callparan, resultdef = Text = "Text", pos = (130,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                           (loadn, resultdef = Text = "Text", pos = (130,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify], cmplx = 1
                              nil
                              symbol = TFOUT
                           )

                        )
                        (callparan, resultdef = LongInt = "LongInt", pos = (130,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (ordconstn, resultdef = LongInt = "LongInt", pos = (130,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                              value = 0
                           )

                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (130,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (130,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        proc = $fpc_write_text_ansistr(LongInt;var Text;const RawByteString);
                        left =
                        (callparan, resultdef = RawByteString = "AnsiString", pos = (130,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                           (loadn, resultdef = RawByteString = "AnsiString", pos = (130,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                              nil
                              symbol = LINEA
                           )

                        )
                        (callparan, resultdef = Text = "Text", pos = (130,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                           (loadn, resultdef = Text = "Text", pos = (130,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify], cmplx = 1
                              nil
                              symbol = TFOUT
                           )

                        )
                        (callparan, resultdef = LongInt = "LongInt", pos = (130,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (ordconstn, resultdef = LongInt = "LongInt", pos = (130,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                              value = 0
                           )

                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (130,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (130,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        proc = $fpc_writeln_end(var Text);
                        left =
                        (callparan, resultdef = Text = "Text", pos = (130,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                           (loadn, resultdef = Text = "Text", pos = (130,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify], cmplx = 1
                              nil
                              symbol = TFOUT
                           )

                        )
                     )

                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (146,9), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (forn, resultdef = $void = "untyped", pos = (131,6), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (loadn, resultdef = QWord = "QWord", pos = (131,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                     nil
                     symbol = M
                  )
                  (ordconstn, resultdef = QWord = "QWord", pos = (131,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     value = 1
                  )
                  (ordconstn, resultdef = QWord = "QWord", pos = (131,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     value = 1200
                  )
                  (blockn, resultdef = $void = "untyped", pos = (132,6), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (statementn, resultdef = <nil>, pos = (145,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        (ifn, resultdef = $void = "untyped", pos = (133,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                           (equaln, resultdef = Boolean = "Boolean", pos = (133,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 5
                              (vecn, resultdef = QWord = "QWord", pos = (133,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                 (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (133,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    nil
                                    symbol = TOPCICLO
                                 )
                                 (typeconvn, resultdef = <no type symbol> = "QWord", pos = (133,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                    (loadn, resultdef = QWord = "QWord", pos = (133,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                       nil
                                       symbol = M
                                    )
                                 )
                              )
                              (vecn, resultdef = QWord = "QWord", pos = (133,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                 (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (133,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    nil
                                    symbol = MAXCICLO
                                 )
                                 (typeconvn, resultdef = <no type symbol> = "QWord", pos = (133,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                    (loadn, resultdef = QWord = "QWord", pos = (133,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                       nil
                                       symbol = I
                                    )
                                 )
                              )
                           )
                           (ifn, resultdef = $void = "untyped", pos = (135,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                              (lten, resultdef = Boolean = "Boolean", pos = (135,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                 (loadn, resultdef = QWord = "QWord", pos = (135,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                    nil
                                    symbol = N
                                 )
                                 (ordconstn, resultdef = QWord = "QWord", pos = (135,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                    value = 12
                                 )
                              )
                              (blockn, resultdef = $void = "untyped", pos = (137,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                 (statementn, resultdef = <nil>, pos = (138,78), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                    (ifn, resultdef = $void = "untyped", pos = (138,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                       (ltn, resultdef = Boolean = "Boolean", pos = (138,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                          (loadn, resultdef = QWord = "QWord", pos = (138,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                             nil
                                             symbol = N
                                          )
                                          (ordconstn, resultdef = QWord = "QWord", pos = (138,31), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                             value = 12
                                          )
                                       )
                                       (blockn, resultdef = $void = "untyped", pos = (138,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                          (statementn, resultdef = <nil>, pos = (138,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                             (nothingn, resultdef = $void = "untyped", pos = (138,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                             )

                                          )
                                          (statementn, resultdef = <nil>, pos = (138,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                             (calln, resultdef = $void = "untyped", pos = (138,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                                proc = $fpc_write_text_uint(LongInt;var Text;QWord);
                                                left =
                                                (callparan, resultdef = QWord = "QWord", pos = (138,52), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                                   (loadn, resultdef = QWord = "QWord", pos = (138,52), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                                      nil
                                                      symbol = M
                                                   )

                                                )
                                                (callparan, resultdef = Text = "Text", pos = (138,50), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                                   (loadn, resultdef = Text = "Text", pos = (138,50), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify], cmplx = 1
                                                      nil
                                                      symbol = TFOUT
                                                   )

                                                )
                                                (callparan, resultdef = LongInt = "LongInt", pos = (138,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                                   (ordconstn, resultdef = LongInt = "LongInt", pos = (138,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                                      value = 0
                                                   )

                                                )
                                             )

                                          )
                                          (statementn, resultdef = <nil>, pos = (138,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                             (calln, resultdef = $void = "untyped", pos = (138,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                                proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                                                left =
                                                (callparan, resultdef = ShortString = "ShortString", pos = (138,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                                   (stringconstn, resultdef = ShortString = "ShortString", pos = (138,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                                   )

                                                )
                                                (callparan, resultdef = Text = "Text", pos = (138,50), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                                   (loadn, resultdef = Text = "Text", pos = (138,50), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify], cmplx = 1
                                                      nil
                                                      symbol = TFOUT
                                                   )

                                                )
                                                (callparan, resultdef = LongInt = "LongInt", pos = (138,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                                   (ordconstn, resultdef = LongInt = "LongInt", pos = (138,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                                      value = 0
                                                   )

                                                )
                                             )

                                          )
                                          (statementn, resultdef = <nil>, pos = (138,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                             (calln, resultdef = $void = "untyped", pos = (138,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                                proc = $fpc_write_end(var Text);
                                                left =
                                                (callparan, resultdef = Text = "Text", pos = (138,50), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                                   (loadn, resultdef = Text = "Text", pos = (138,50), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify], cmplx = 1
                                                      nil
                                                      symbol = TFOUT
                                                   )

                                                )
                                             )

                                          )
                                       )
                                       (blockn, resultdef = $void = "untyped", pos = (138,64), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                          (statementn, resultdef = <nil>, pos = (138,64), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                             (nothingn, resultdef = $void = "untyped", pos = (138,64), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                             )

                                          )
                                          (statementn, resultdef = <nil>, pos = (138,64), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                             (calln, resultdef = $void = "untyped", pos = (138,64), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                                proc = $fpc_write_text_uint(LongInt;var Text;QWord);
                                                left =
                                                (callparan, resultdef = QWord = "QWord", pos = (138,77), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                                   (loadn, resultdef = QWord = "QWord", pos = (138,77), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                                      nil
                                                      symbol = M
                                                   )

                                                )
                                                (callparan, resultdef = Text = "Text", pos = (138,75), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                                   (loadn, resultdef = Text = "Text", pos = (138,75), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify], cmplx = 1
                                                      nil
                                                      symbol = TFOUT
                                                   )

                                                )
                                                (callparan, resultdef = LongInt = "LongInt", pos = (138,64), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                                   (ordconstn, resultdef = LongInt = "LongInt", pos = (138,64), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                                      value = 0
                                                   )

                                                )
                                             )

                                          )
                                          (statementn, resultdef = <nil>, pos = (138,64), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                             (calln, resultdef = $void = "untyped", pos = (138,64), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                                proc = $fpc_write_end(var Text);
                                                left =
                                                (callparan, resultdef = Text = "Text", pos = (138,75), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                                   (loadn, resultdef = Text = "Text", pos = (138,75), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify], cmplx = 1
                                                      nil
                                                      symbol = TFOUT
                                                   )

                                                )
                                             )

                                          )
                                       )
                                       nil
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (140,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
                                    (assignn, resultdef = $void = "untyped", pos = (139,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
                                       (loadn, resultdef = QWord = "QWord", pos = (139,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                                          nil
                                          symbol = N
                                       )
                                       (addn, resultdef = QWord = "QWord", pos = (139,31), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                          (loadn, resultdef = QWord = "QWord", pos = (139,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                             nil
                                             symbol = N
                                          )
                                          (ordconstn, resultdef = QWord = "QWord", pos = (139,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                             value = 1
                                          )
                                       )
                                    )

                                 )
                              )
                              (blockn, resultdef = $void = "untyped", pos = (142,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                 (statementn, resultdef = <nil>, pos = (143,31), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                    (assignn, resultdef = $void = "untyped", pos = (143,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                       (loadn, resultdef = QWord = "QWord", pos = (143,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                                          nil
                                          symbol = N
                                       )
                                       (ordconstn, resultdef = QWord = "QWord", pos = (143,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                          value = 1
                                       )
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (144,46), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                    (blockn, resultdef = $void = "untyped", pos = (144,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                       (statementn, resultdef = <nil>, pos = (144,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                          (nothingn, resultdef = $void = "untyped", pos = (144,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                          )

                                       )
                                       (statementn, resultdef = <nil>, pos = (144,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                          (calln, resultdef = $void = "untyped", pos = (144,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                             proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                                             left =
                                             (callparan, resultdef = ShortString = "ShortString", pos = (144,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                                (stringconstn, resultdef = ShortString = "ShortString", pos = (144,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                                )

                                             )
                                             (callparan, resultdef = Text = "Text", pos = (144,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                                (loadn, resultdef = Text = "Text", pos = (144,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify], cmplx = 1
                                                   nil
                                                   symbol = TFOUT
                                                )

                                             )
                                             (callparan, resultdef = LongInt = "LongInt", pos = (144,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                                (ordconstn, resultdef = LongInt = "LongInt", pos = (144,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                                                   value = 0
                                                )

                                             )
                                          )

                                       )
                                       (statementn, resultdef = <nil>, pos = (144,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                          (calln, resultdef = $void = "untyped", pos = (144,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                                             proc = $fpc_writeln_end(var Text);
                                             left =
                                             (callparan, resultdef = Text = "Text", pos = (144,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                                                (loadn, resultdef = Text = "Text", pos = (144,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify], cmplx = 1
                                                   nil
                                                   symbol = TFOUT
                                                )

                                             )
                                          )

                                       )
                                    )

                                 )
                              )
                              nil
                           )
                           nil
                           nil
                        )

                     )
                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (148,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (assignn, resultdef = $void = "untyped", pos = (148,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                  (loadn, resultdef = QWord = "QWord", pos = (148,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                     nil
                     symbol = N
                  )
                  (ordconstn, resultdef = QWord = "QWord", pos = (148,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     value = 1
                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (149,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (assignn, resultdef = $void = "untyped", pos = (149,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
                  (loadn, resultdef = QWord = "QWord", pos = (149,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
                     nil
                     symbol = I
                  )
                  (addn, resultdef = QWord = "QWord", pos = (149,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (149,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = I
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (149,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        value = 1
                     )
                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (150,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (blockn, resultdef = $void = "untyped", pos = (150,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (statementn, resultdef = <nil>, pos = (150,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (nothingn, resultdef = $void = "untyped", pos = (150,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (150,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (150,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                        left =
                        (callparan, resultdef = ShortString = "ShortString", pos = (150,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (stringconstn, resultdef = ShortString = "ShortString", pos = (150,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           )

                        )
                        (callparan, resultdef = Text = "Text", pos = (150,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                           (loadn, resultdef = Text = "Text", pos = (150,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify], cmplx = 1
                              nil
                              symbol = TFOUT
                           )

                        )
                        (callparan, resultdef = LongInt = "LongInt", pos = (150,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (ordconstn, resultdef = LongInt = "LongInt", pos = (150,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                              value = 0
                           )

                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (150,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (150,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        proc = $fpc_writeln_end(var Text);
                        left =
                        (callparan, resultdef = Text = "Text", pos = (150,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                           (loadn, resultdef = Text = "Text", pos = (150,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify], cmplx = 1
                              nil
                              symbol = TFOUT
                           )

                        )
                     )

                  )
               )

            )
         )
         nil
         nil
      )

   )
   (statementn, resultdef = <nil>, pos = (152,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (152,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Stampa_chiusuralong(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (152,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (152,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (153,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (153,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = CloseFile(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (153,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (153,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFCSVOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (154,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (154,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = CloseFile(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (154,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (154,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFCSVTOPOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (155,17), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (155,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = CloseFile(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (155,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (155,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFOUT
            )

         )
      )

   )
)

*******************************************************************************
after the firstpass
$main; Register;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
   (statementn, resultdef = <nil>, pos = (28,36), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (28,2), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = AssignFile(out Text;const RawByteString);
         left =
         (callparan, resultdef = Text = "Text", pos = (28,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (28,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken], cmplx = 1
               nil
               symbol = TFOUT
            )

         )
         (callparan, resultdef = RawByteString = "AnsiString", pos = (28,35), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (28,35), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (29,21), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (29,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Rewrite(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (29,19), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (29,19), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (30,45), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (30,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = AssignFile(out Text;const RawByteString);
         left =
         (callparan, resultdef = Text = "Text", pos = (30,22), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (30,22), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken], cmplx = 1
               nil
               symbol = TFCSVOUT
            )

         )
         (callparan, resultdef = RawByteString = "AnsiString", pos = (30,44), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (30,44), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (31,22), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (31,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Rewrite(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (31,20), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (31,20), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFCSVOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (32,49), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (32,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = AssignFile(out Text;const RawByteString);
         left =
         (callparan, resultdef = Text = "Text", pos = (32,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (32,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken], cmplx = 1
               nil
               symbol = TFCSVTOPOUT
            )

         )
         (callparan, resultdef = RawByteString = "AnsiString", pos = (32,48), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
            (stringconstn, resultdef = AnsiString = "AnsiString", pos = (32,48), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (33,25), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (33,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Rewrite(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (33,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (33,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFCSVTOPOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (34,41), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (34,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Vettori_azzera(var MioType_mioarray;QWord);
         left =
         (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (34,25), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (34,25), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = CONTATORI
            )

         )
         (callparan, resultdef = QWord = "QWord", pos = (34,40), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
            (ordconstn, resultdef = QWord = "QWord", pos = (34,40), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
               value = 1200
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (35,40), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (35,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Vettori_azzera(var MioType_mioarray;QWord);
         left =
         (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (35,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (35,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TOPCICLO
            )

         )
         (callparan, resultdef = QWord = "QWord", pos = (35,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
            (ordconstn, resultdef = QWord = "QWord", pos = (35,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
               value = 1200
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (36,16), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (36,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
         (loadn, resultdef = QWord = "QWord", pos = (36,1), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
            nil
            symbol = MAXCONTATORE
         )
         (ordconstn, resultdef = QWord = "QWord", pos = (36,15), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
            value = 0
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (54,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               (statementn, resultdef = <nil>, pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (nothingn, resultdef = $void = "untyped", pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                  )

               )
               (statementn, resultdef = <nil>, pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (37,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                        nil
                        symbol = M
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (37,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 0
                        value = 0
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (whilerepeatn, resultdef = $void = "untyped", pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (gten, resultdef = Boolean = "Boolean", pos = (37,1), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done,nf_internal], cmplx = 2
                        (loadn, resultdef = QWord = "QWord", pos = (37,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                           nil
                           symbol = M
                        )
                        (ordconstn, resultdef = QWord = "QWord", pos = (37,13), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 1200
                        )
                     )
                     (blockn, resultdef = $void = "untyped", pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        (statementn, resultdef = <nil>, pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (nothingn, resultdef = $void = "untyped", pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (assignn, resultdef = $void = "untyped", pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 4
                              (loadn, resultdef = QWord = "QWord", pos = (37,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                 nil
                                 symbol = M
                              )
                              (inlinen, resultdef = QWord = "QWord", pos = (37,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_internal], cmplx = 2, inlinenumber = in_succ_x
                                 (loadn, resultdef = QWord = "QWord", pos = (37,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    nil
                                    symbol = M
                                 )
                              )
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (blockn, resultdef = $void = "untyped", pos = (37,30), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (statementn, resultdef = <nil>, pos = (38,8), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (assignn, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 3
                                    (loadn, resultdef = QWord = "QWord", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                       nil
                                       symbol = N
                                    )
                                    (loadn, resultdef = QWord = "QWord", pos = (38,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                       nil
                                       symbol = M
                                    )
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (39,16), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (assignn, resultdef = $void = "untyped", pos = (39,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                    (loadn, resultdef = QWord = "QWord", pos = (39,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                       nil
                                       symbol = CONTATORE
                                    )
                                    (ordconstn, resultdef = QWord = "QWord", pos = (39,15), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 0
                                    )
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (48,16), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (whilerepeatn, resultdef = $void = "untyped", pos = (40,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                    (equaln, resultdef = Boolean = "Boolean", pos = (48,9), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
                                       (loadn, resultdef = QWord = "QWord", pos = (48,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                          nil
                                          symbol = N
                                       )
                                       (ordconstn, resultdef = QWord = "QWord", pos = (48,14), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                          value = 1
                                       )
                                    )
                                    (blockn, resultdef = $void = "untyped", pos = (48,9), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                       (statementn, resultdef = <nil>, pos = (44,18), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                          (ifn, resultdef = $void = "untyped", pos = (41,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                             (equaln, resultdef = Boolean = "Boolean", pos = (41,9), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
                                                (andn, resultdef = QWord = "QWord", pos = (41,12), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2
                                                   (loadn, resultdef = QWord = "QWord", pos = (41,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                      nil
                                                      symbol = N
                                                   )
                                                   (ordconstn, resultdef = QWord = "QWord", pos = (41,16), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                      value = 1
                                                   )
                                                )
                                                (ordconstn, resultdef = QWord = "QWord", pos = (41,20), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                   value = 0
                                                )
                                             )
                                             (assignn, resultdef = $void = "untyped", pos = (42,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                                                (loadn, resultdef = QWord = "QWord", pos = (42,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                   nil
                                                   symbol = N
                                                )
                                                (shrn, resultdef = QWord = "QWord", pos = (42,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_pass1_done], cmplx = 2
                                                   (loadn, resultdef = QWord = "QWord", pos = (42,13), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                      nil
                                                      symbol = N
                                                   )
                                                   (ordconstn, resultdef = Int64 = "Int64", pos = (42,19), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                      value = 1
                                                   )
                                                )
                                             )
                                             (assignn, resultdef = $void = "untyped", pos = (44,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 10
                                                (loadn, resultdef = QWord = "QWord", pos = (44,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                   nil
                                                   symbol = N
                                                )
                                                (addn, resultdef = QWord = "QWord", pos = (44,16), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 8
                                                   (muln, resultdef = QWord = "QWord", pos = (44,14), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 7
                                                      (ordconstn, resultdef = QWord = "QWord", pos = (44,13), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 3
                                                      )
                                                      (loadn, resultdef = QWord = "QWord", pos = (44,15), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                         nil
                                                         symbol = N
                                                      )
                                                   )
                                                   (ordconstn, resultdef = QWord = "QWord", pos = (44,17), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                      value = 1
                                                   )
                                                )
                                             )
                                             nil
                                          )

                                       )
                                       (statementn, resultdef = <nil>, pos = (45,38), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                          (blockn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                             (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (nothingn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (tempcreaten, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                   size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EDEC2C0
                                                   [ti_may_be_in_reg]
                                                   tempinit =
                                                   nil
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (assignn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                   (temprefn, resultdef = Pointer = "^untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                      temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC2C0 flags = [ti_may_be_in_reg])
                                                   )
                                                   (typeconvn, resultdef = Pointer = "^untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_equal, convnodeflags = []
                                                      (calln, resultdef = PText = "^Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                                                         proc = $fpc_get_output:^Text;
                                                      )
                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (calln, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                   proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                                                   left =
                                                   (callparan, resultdef = ShortString = "ShortString", pos = (45,19), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                                                      (stringconstn, resultdef = ShortString = "ShortString", pos = (45,19), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                                                      )

                                                   )
                                                   (callparan, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                      (typeconvn, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                         (derefn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                            (temprefn, resultdef = Pointer = "^untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                               temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC2C0 flags = [ti_may_be_in_reg])
                                                            )
                                                         )
                                                      )

                                                   )
                                                   (callparan, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                      (ordconstn, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 0
                                                      )

                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (calln, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                   proc = $fpc_write_text_char(LongInt;var Text;Char);
                                                   left =
                                                   (callparan, resultdef = Char = "Char", pos = (45,23), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                      (ordconstn, resultdef = Char = "Char", pos = (45,23), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 32
                                                      )

                                                   )
                                                   (callparan, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                      (typeconvn, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                         (derefn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                            (temprefn, resultdef = Pointer = "^untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                               temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC2C0 flags = [ti_may_be_in_reg])
                                                            )
                                                         )
                                                      )

                                                   )
                                                   (callparan, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                      (ordconstn, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 0
                                                      )

                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (calln, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                   proc = $fpc_write_text_uint(LongInt;var Text;QWord);
                                                   left =
                                                   (callparan, resultdef = QWord = "QWord", pos = (45,25), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                                      (loadn, resultdef = QWord = "QWord", pos = (45,25), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                         nil
                                                         symbol = M
                                                      )

                                                   )
                                                   (callparan, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                      (typeconvn, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                         (derefn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                            (temprefn, resultdef = Pointer = "^untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                               temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC2C0 flags = [ti_may_be_in_reg])
                                                            )
                                                         )
                                                      )

                                                   )
                                                   (callparan, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                      (ordconstn, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 0
                                                      )

                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (calln, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                   proc = $fpc_write_text_char(LongInt;var Text;Char);
                                                   left =
                                                   (callparan, resultdef = Char = "Char", pos = (45,29), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                      (ordconstn, resultdef = Char = "Char", pos = (45,29), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 32
                                                      )

                                                   )
                                                   (callparan, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                      (typeconvn, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                         (derefn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                            (temprefn, resultdef = Pointer = "^untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                               temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC2C0 flags = [ti_may_be_in_reg])
                                                            )
                                                         )
                                                      )

                                                   )
                                                   (callparan, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                      (ordconstn, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 0
                                                      )

                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (calln, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                   proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                                                   left =
                                                   (callparan, resultdef = ShortString = "ShortString", pos = (45,35), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                                                      (stringconstn, resultdef = ShortString = "ShortString", pos = (45,35), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                                                      )

                                                   )
                                                   (callparan, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                      (typeconvn, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                         (derefn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                            (temprefn, resultdef = Pointer = "^untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                               temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC2C0 flags = [ti_may_be_in_reg])
                                                            )
                                                         )
                                                      )

                                                   )
                                                   (callparan, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                      (ordconstn, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 0
                                                      )

                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (calln, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                   proc = $fpc_write_text_uint(LongInt;var Text;QWord);
                                                   left =
                                                   (callparan, resultdef = QWord = "QWord", pos = (45,37), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                                      (loadn, resultdef = QWord = "QWord", pos = (45,37), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                         nil
                                                         symbol = N
                                                      )

                                                   )
                                                   (callparan, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                      (typeconvn, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                         (derefn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                            (temprefn, resultdef = Pointer = "^untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                               temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC2C0 flags = [ti_may_be_in_reg])
                                                            )
                                                         )
                                                      )

                                                   )
                                                   (callparan, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                      (ordconstn, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 0
                                                      )

                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (calln, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                   proc = $fpc_writeln_end(var Text);
                                                   left =
                                                   (callparan, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                      (typeconvn, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                         (derefn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                            (temprefn, resultdef = Pointer = "^untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                               temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC2C0 flags = [ti_may_be_in_reg])
                                                            )
                                                         )
                                                      )

                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                                                (tempdeleten, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                   release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EDEC2C0
                                                )

                                             )
                                          )

                                       )
                                       (statementn, resultdef = <nil>, pos = (46,31), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                          (assignn, resultdef = $void = "untyped", pos = (46,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                                             (loadn, resultdef = QWord = "QWord", pos = (46,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                nil
                                                symbol = CONTATORE
                                             )
                                             (addn, resultdef = QWord = "QWord", pos = (46,28), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2
                                                (loadn, resultdef = QWord = "QWord", pos = (46,18), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                   nil
                                                   symbol = CONTATORE
                                                )
                                                (ordconstn, resultdef = QWord = "QWord", pos = (46,30), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                   value = 1
                                                )
                                             )
                                          )

                                       )
                                       (statementn, resultdef = <nil>, pos = (47,44), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                          (ifn, resultdef = $void = "untyped", pos = (47,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                             (gtn, resultdef = Boolean = "Boolean", pos = (47,12), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 4
                                                (loadn, resultdef = QWord = "QWord", pos = (47,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                   nil
                                                   symbol = N
                                                )
                                                (vecn, resultdef = QWord = "QWord", pos = (47,22), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 2
                                                   (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (47,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                      nil
                                                      symbol = TOPCICLO
                                                   )
                                                   (typeconvn, resultdef = <no type symbol> = "QWord", pos = (47,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                                      (loadn, resultdef = QWord = "QWord", pos = (47,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                         nil
                                                         symbol = M
                                                      )
                                                   )
                                                )
                                             )
                                             (assignn, resultdef = $void = "untyped", pos = (47,30), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                                                (vecn, resultdef = QWord = "QWord", pos = (47,38), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 2
                                                   (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (47,30), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                      nil
                                                      symbol = TOPCICLO
                                                   )
                                                   (typeconvn, resultdef = <no type symbol> = "QWord", pos = (47,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                                      (loadn, resultdef = QWord = "QWord", pos = (47,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                         nil
                                                         symbol = M
                                                      )
                                                   )
                                                )
                                                (loadn, resultdef = QWord = "QWord", pos = (47,43), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                   nil
                                                   symbol = N
                                                )
                                             )
                                             nil
                                             nil
                                          )

                                       )
                                    )
                                    nil
                                    nil
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (49,60), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (ifn, resultdef = $void = "untyped", pos = (49,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                    (gtn, resultdef = Boolean = "Boolean", pos = (49,17), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
                                       (loadn, resultdef = QWord = "QWord", pos = (49,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                          nil
                                          symbol = CONTATORE
                                       )
                                       (loadn, resultdef = QWord = "QWord", pos = (49,19), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                          nil
                                          symbol = MAXCONTATORE
                                       )
                                    )
                                    (assignn, resultdef = $void = "untyped", pos = (49,37), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 3
                                       (loadn, resultdef = QWord = "QWord", pos = (49,37), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                          nil
                                          symbol = MAXCONTATORE
                                       )
                                       (loadn, resultdef = QWord = "QWord", pos = (49,51), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                          nil
                                          symbol = CONTATORE
                                       )
                                    )
                                    nil
                                    nil
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (50,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (blockn, resultdef = $void = "untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                    (statementn, resultdef = <nil>, pos = (50,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (nothingn, resultdef = $void = "untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (50,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (tempcreaten, resultdef = $void = "untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                          size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EDEC340
                                          [ti_may_be_in_reg]
                                          tempinit =
                                          nil
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (50,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (assignn, resultdef = $void = "untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                          (temprefn, resultdef = Pointer = "^untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                             temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC340 flags = [ti_may_be_in_reg])
                                          )
                                          (typeconvn, resultdef = Pointer = "^untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_equal, convnodeflags = []
                                             (calln, resultdef = PText = "^Text", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                                                proc = $fpc_get_output:^Text;
                                             )
                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (50,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (calln, resultdef = $void = "untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                          proc = $fpc_writeln_end(var Text);
                                          left =
                                          (callparan, resultdef = Text = "Text", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                             (typeconvn, resultdef = Text = "Text", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                (derefn, resultdef = $void = "untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                   (temprefn, resultdef = Pointer = "^untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                      temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC340 flags = [ti_may_be_in_reg])
                                                   )
                                                )
                                             )

                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (50,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                                       (tempdeleten, resultdef = $void = "untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                          release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EDEC340
                                       )

                                    )
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (51,51), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (blockn, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                    (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (nothingn, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (tempcreaten, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                          size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EDEC3C0
                                          [ti_may_be_in_reg]
                                          tempinit =
                                          nil
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (assignn, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                          (temprefn, resultdef = Pointer = "^untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                             temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC3C0 flags = [ti_may_be_in_reg])
                                          )
                                          (typeconvn, resultdef = Pointer = "^untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_equal, convnodeflags = []
                                             (calln, resultdef = PText = "^Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                                                proc = $fpc_get_output:^Text;
                                             )
                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (calln, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                          proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                                          left =
                                          (callparan, resultdef = ShortString = "ShortString", pos = (51,18), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                                             (stringconstn, resultdef = ShortString = "ShortString", pos = (51,18), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                                             )

                                          )
                                          (callparan, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                             (typeconvn, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                (derefn, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                   (temprefn, resultdef = Pointer = "^untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                      temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC3C0 flags = [ti_may_be_in_reg])
                                                   )
                                                )
                                             )

                                          )
                                          (callparan, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                             (ordconstn, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                value = 0
                                             )

                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (calln, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                          proc = $fpc_write_text_uint(LongInt;var Text;QWord);
                                          left =
                                          (callparan, resultdef = QWord = "QWord", pos = (51,20), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                             (loadn, resultdef = QWord = "QWord", pos = (51,20), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                nil
                                                symbol = M
                                             )

                                          )
                                          (callparan, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                             (typeconvn, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                (derefn, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                   (temprefn, resultdef = Pointer = "^untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                      temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC3C0 flags = [ti_may_be_in_reg])
                                                   )
                                                )
                                             )

                                          )
                                          (callparan, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                             (ordconstn, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                value = 0
                                             )

                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (calln, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                          proc = $fpc_write_text_char(LongInt;var Text;Char);
                                          left =
                                          (callparan, resultdef = Char = "Char", pos = (51,24), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                             (ordconstn, resultdef = Char = "Char", pos = (51,24), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                value = 32
                                             )

                                          )
                                          (callparan, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                             (typeconvn, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                (derefn, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                   (temprefn, resultdef = Pointer = "^untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                      temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC3C0 flags = [ti_may_be_in_reg])
                                                   )
                                                )
                                             )

                                          )
                                          (callparan, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                             (ordconstn, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                value = 0
                                             )

                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (calln, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                          proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                                          left =
                                          (callparan, resultdef = ShortString = "ShortString", pos = (51,39), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                                             (stringconstn, resultdef = ShortString = "ShortString", pos = (51,39), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                                             )

                                          )
                                          (callparan, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                             (typeconvn, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                (derefn, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                   (temprefn, resultdef = Pointer = "^untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                      temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC3C0 flags = [ti_may_be_in_reg])
                                                   )
                                                )
                                             )

                                          )
                                          (callparan, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                             (ordconstn, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                value = 0
                                             )

                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (calln, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                          proc = $fpc_write_text_uint(LongInt;var Text;QWord);
                                          left =
                                          (callparan, resultdef = QWord = "QWord", pos = (51,50), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 2
                                             (loadn, resultdef = QWord = "QWord", pos = (51,50), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                nil
                                                symbol = CONTATORE
                                             )

                                          )
                                          (callparan, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                             (typeconvn, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                (derefn, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                   (temprefn, resultdef = Pointer = "^untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                      temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC3C0 flags = [ti_may_be_in_reg])
                                                   )
                                                )
                                             )

                                          )
                                          (callparan, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                             (ordconstn, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                value = 0
                                             )

                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (calln, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                          proc = $fpc_writeln_end(var Text);
                                          left =
                                          (callparan, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                             (typeconvn, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                (derefn, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                   (temprefn, resultdef = Pointer = "^untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                      temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC3C0 flags = [ti_may_be_in_reg])
                                                   )
                                                )
                                             )

                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                                       (tempdeleten, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                          release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EDEC3C0
                                       )

                                    )
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (52,49), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 10
                                 (assignn, resultdef = $void = "untyped", pos = (52,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 6
                                    (vecn, resultdef = QWord = "QWord", pos = (52,13), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 2
                                       (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (52,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                          nil
                                          symbol = CONTATORI
                                       )
                                       (typeconvn, resultdef = <no type symbol> = "QWord", pos = (52,14), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                          (loadn, resultdef = QWord = "QWord", pos = (52,14), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                             nil
                                             symbol = CONTATORE
                                          )
                                       )
                                    )
                                    (addn, resultdef = QWord = "QWord", pos = (52,47), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 3
                                       (vecn, resultdef = QWord = "QWord", pos = (52,36), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 2
                                          (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (52,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                             nil
                                             symbol = CONTATORI
                                          )
                                          (typeconvn, resultdef = <no type symbol> = "QWord", pos = (52,37), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                             (loadn, resultdef = QWord = "QWord", pos = (52,37), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                nil
                                                symbol = CONTATORE
                                             )
                                          )
                                       )
                                       (ordconstn, resultdef = QWord = "QWord", pos = (52,48), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                          value = 1
                                       )
                                    )
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (53,24), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 4
                                 (assignn, resultdef = $void = "untyped", pos = (53,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                                    (vecn, resultdef = QWord = "QWord", pos = (53,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 2
                                       (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (53,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                          nil
                                          symbol = NUMERI
                                       )
                                       (typeconvn, resultdef = <no type symbol> = "QWord", pos = (53,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                          (loadn, resultdef = QWord = "QWord", pos = (53,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                             nil
                                             symbol = M
                                          )
                                       )
                                    )
                                    (loadn, resultdef = QWord = "QWord", pos = (53,15), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                       nil
                                       symbol = CONTATORE
                                    )
                                 )

                              )
                           )

                        )
                     )
                     nil
                     nil
                  )

               )
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (58,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (58,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
         (loadn, resultdef = QWord = "QWord", pos = (58,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
            nil
            symbol = M
         )
         (ordconstn, resultdef = QWord = "QWord", pos = (58,6), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (59,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (59,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Stampa_stampauno_Semplificata(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (59,38), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (59,38), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (64,8), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (whilerepeatn, resultdef = $void = "untyped", pos = (60,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (lten, resultdef = Boolean = "Boolean", pos = (60,8), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
            (loadn, resultdef = QWord = "QWord", pos = (60,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = M
            )
            (ordconstn, resultdef = QWord = "QWord", pos = (60,11), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
               value = 1200
            )
         )
         (blockn, resultdef = $void = "untyped", pos = (61,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
            (statementn, resultdef = <nil>, pos = (62,58), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
               (calln, resultdef = $void = "untyped", pos = (62,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  proc = Stampa_stampalinea_Semplificata(var Text;var QWord;var MioType_mioarray);
                  left =
                  (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (62,57), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                     (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (62,57), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = NUMERI
                     )

                  )
                  (callparan, resultdef = QWord = "QWord", pos = (62,50), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (62,50), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = M
                     )

                  )
                  (callparan, resultdef = Text = "Text", pos = (62,48), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                     (loadn, resultdef = Text = "Text", pos = (62,48), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = TFOUT
                     )

                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (63,18), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 4
               (assignn, resultdef = $void = "untyped", pos = (63,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                  (loadn, resultdef = QWord = "QWord", pos = (63,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                     nil
                     symbol = M
                  )
                  (addn, resultdef = QWord = "QWord", pos = (63,15), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (63,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = M
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (63,16), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 12
                     )
                  )
               )

            )
         )
         nil
         nil
      )

   )
   (statementn, resultdef = <nil>, pos = (65,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (65,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Stampa_chiusuralong(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (65,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (65,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (66,26), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (66,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Stampa_stampadue(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (66,25), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (66,25), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (67,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (67,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
         (loadn, resultdef = QWord = "QWord", pos = (67,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
            nil
            symbol = M
         )
         (ordconstn, resultdef = QWord = "QWord", pos = (67,6), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (72,8), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (whilerepeatn, resultdef = $void = "untyped", pos = (68,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (lten, resultdef = Boolean = "Boolean", pos = (68,8), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
            (loadn, resultdef = QWord = "QWord", pos = (68,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = M
            )
            (loadn, resultdef = QWord = "QWord", pos = (68,11), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = MAXCONTATORE
            )
         )
         (blockn, resultdef = $void = "untyped", pos = (69,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
            (statementn, resultdef = <nil>, pos = (70,45), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
               (calln, resultdef = $void = "untyped", pos = (70,8), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  proc = Stampa_stampalinea(var Text;var QWord;var MioType_mioarray);
                  left =
                  (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (70,44), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                     (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (70,44), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = CONTATORI
                     )

                  )
                  (callparan, resultdef = QWord = "QWord", pos = (70,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (70,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = M
                     )

                  )
                  (callparan, resultdef = Text = "Text", pos = (70,32), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                     (loadn, resultdef = Text = "Text", pos = (70,32), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = TFOUT
                     )

                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (71,14), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 4
               (assignn, resultdef = $void = "untyped", pos = (71,8), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                  (loadn, resultdef = QWord = "QWord", pos = (71,8), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                     nil
                     symbol = M
                  )
                  (addn, resultdef = QWord = "QWord", pos = (71,12), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (71,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = M
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (71,13), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 6
                     )
                  )
               )

            )
         )
         nil
         nil
      )

   )
   (statementn, resultdef = <nil>, pos = (73,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (73,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Stampa_chiusuralong(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (73,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (73,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (74,24), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (74,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Stampa_stampatre(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (74,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (74,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (75,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (75,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
         (loadn, resultdef = QWord = "QWord", pos = (75,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
            nil
            symbol = M
         )
         (ordconstn, resultdef = QWord = "QWord", pos = (75,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (80,8), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (whilerepeatn, resultdef = $void = "untyped", pos = (76,2), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (lten, resultdef = Boolean = "Boolean", pos = (76,9), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
            (loadn, resultdef = QWord = "QWord", pos = (76,8), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = M
            )
            (ordconstn, resultdef = QWord = "QWord", pos = (76,12), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
               value = 1200
            )
         )
         (blockn, resultdef = $void = "untyped", pos = (77,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
            (statementn, resultdef = <nil>, pos = (78,46), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
               (calln, resultdef = $void = "untyped", pos = (78,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  proc = Stampa_stampalinea(var Text;var QWord;var MioType_mioarray);
                  left =
                  (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (78,45), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                     (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (78,45), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = TOPCICLO
                     )

                  )
                  (callparan, resultdef = QWord = "QWord", pos = (78,36), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (78,36), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = M
                     )

                  )
                  (callparan, resultdef = Text = "Text", pos = (78,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                     (loadn, resultdef = Text = "Text", pos = (78,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = TFOUT
                     )

                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (79,17), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 4
               (assignn, resultdef = $void = "untyped", pos = (79,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                  (loadn, resultdef = QWord = "QWord", pos = (79,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                     nil
                     symbol = M
                  )
                  (addn, resultdef = QWord = "QWord", pos = (79,15), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (79,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = M
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (79,16), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 6
                     )
                  )
               )

            )
         )
         nil
         nil
      )

   )
   (statementn, resultdef = <nil>, pos = (81,28), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (81,2), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Stampa_chiusuralong(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (81,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (81,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (82,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (82,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
         (loadn, resultdef = QWord = "QWord", pos = (82,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
            nil
            symbol = N
         )
         (ordconstn, resultdef = QWord = "QWord", pos = (82,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (87,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (whilerepeatn, resultdef = $void = "untyped", pos = (83,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (lten, resultdef = Boolean = "Boolean", pos = (83,8), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
            (loadn, resultdef = QWord = "QWord", pos = (83,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = N
            )
            (loadn, resultdef = QWord = "QWord", pos = (83,10), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = MAXCONTATORE
            )
         )
         (blockn, resultdef = $void = "untyped", pos = (84,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
            (statementn, resultdef = <nil>, pos = (85,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
               (calln, resultdef = $void = "untyped", pos = (85,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  proc = Stampa_stampacsv(var Text;var QWord;var MioType_mioarray);
                  left =
                  (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (85,38), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                     (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (85,38), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = CONTATORI
                     )

                  )
                  (callparan, resultdef = QWord = "QWord", pos = (85,28), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (85,28), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = N
                     )

                  )
                  (callparan, resultdef = Text = "Text", pos = (85,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                     (loadn, resultdef = Text = "Text", pos = (85,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = TFCSVOUT
                     )

                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (86,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 4
               (assignn, resultdef = $void = "untyped", pos = (86,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                  (loadn, resultdef = QWord = "QWord", pos = (86,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                     nil
                     symbol = N
                  )
                  (addn, resultdef = QWord = "QWord", pos = (86,5), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (86,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = N
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (86,6), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 1
                     )
                  )
               )

            )
         )
         nil
         nil
      )

   )
   (statementn, resultdef = <nil>, pos = (88,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (88,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
         (loadn, resultdef = QWord = "QWord", pos = (88,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
            nil
            symbol = N
         )
         (ordconstn, resultdef = QWord = "QWord", pos = (88,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (93,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (whilerepeatn, resultdef = $void = "untyped", pos = (89,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (lten, resultdef = Boolean = "Boolean", pos = (89,8), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
            (loadn, resultdef = QWord = "QWord", pos = (89,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = N
            )
            (ordconstn, resultdef = QWord = "QWord", pos = (89,10), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
               value = 1200
            )
         )
         (blockn, resultdef = $void = "untyped", pos = (90,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
            (statementn, resultdef = <nil>, pos = (91,41), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
               (calln, resultdef = $void = "untyped", pos = (91,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  proc = Stampa_stampacsv(var Text;var QWord;var MioType_mioarray);
                  left =
                  (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (91,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                     (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (91,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = TOPCICLO
                     )

                  )
                  (callparan, resultdef = QWord = "QWord", pos = (91,31), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (91,31), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = N
                     )

                  )
                  (callparan, resultdef = Text = "Text", pos = (91,29), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                     (loadn, resultdef = Text = "Text", pos = (91,29), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = TFCSVTOPOUT
                     )

                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (92,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 4
               (assignn, resultdef = $void = "untyped", pos = (92,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                  (loadn, resultdef = QWord = "QWord", pos = (92,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                     nil
                     symbol = N
                  )
                  (addn, resultdef = QWord = "QWord", pos = (92,5), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (92,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = N
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (92,6), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 1
                     )
                  )
               )

            )
         )
         nil
         nil
      )

   )
   (statementn, resultdef = <nil>, pos = (95,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (tempcreaten, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EDEC440
               [ti_may_be_in_reg]
               tempinit =
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (assignn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               (temprefn, resultdef = Pointer = "^untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                  temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC440 flags = [ti_may_be_in_reg])
               )
               (typeconvn, resultdef = Pointer = "^untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_equal, convnodeflags = []
                  (calln, resultdef = PText = "^Text", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                     proc = $fpc_get_output:^Text;
                  )
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
               left =
               (callparan, resultdef = ShortString = "ShortString", pos = (95,24), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                  (stringconstn, resultdef = ShortString = "ShortString", pos = (95,24), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                  )

               )
               (callparan, resultdef = Text = "Text", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                  (typeconvn, resultdef = Text = "Text", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                     (derefn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        (temprefn, resultdef = Pointer = "^untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC440 flags = [ti_may_be_in_reg])
                        )
                     )
                  )

               )
               (callparan, resultdef = LongInt = "LongInt", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                  (ordconstn, resultdef = LongInt = "LongInt", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                     value = 0
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               proc = $fpc_write_text_uint(LongInt;var Text;QWord);
               left =
               (callparan, resultdef = QWord = "QWord", pos = (95,38), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 2
                  (loadn, resultdef = QWord = "QWord", pos = (95,38), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                     nil
                     symbol = MAXCONTATORE
                  )

               )
               (callparan, resultdef = Text = "Text", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                  (typeconvn, resultdef = Text = "Text", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                     (derefn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        (temprefn, resultdef = Pointer = "^untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC440 flags = [ti_may_be_in_reg])
                        )
                     )
                  )

               )
               (callparan, resultdef = LongInt = "LongInt", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                  (ordconstn, resultdef = LongInt = "LongInt", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                     value = 0
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               proc = $fpc_writeln_end(var Text);
               left =
               (callparan, resultdef = Text = "Text", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                  (typeconvn, resultdef = Text = "Text", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                     (derefn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        (temprefn, resultdef = Pointer = "^untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC440 flags = [ti_may_be_in_reg])
                        )
                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
            (tempdeleten, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EDEC440
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (97,50), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               (statementn, resultdef = <nil>, pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (nothingn, resultdef = $void = "untyped", pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                  )

               )
               (statementn, resultdef = <nil>, pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (97,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                        nil
                        symbol = N
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (97,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 0
                        value = 0
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (whilerepeatn, resultdef = $void = "untyped", pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (gten, resultdef = Boolean = "Boolean", pos = (97,1), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done,nf_internal], cmplx = 2
                        (loadn, resultdef = QWord = "QWord", pos = (97,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                           nil
                           symbol = N
                        )
                        (ordconstn, resultdef = QWord = "QWord", pos = (97,13), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 1200
                        )
                     )
                     (blockn, resultdef = $void = "untyped", pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 9
                        (statementn, resultdef = <nil>, pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 9
                           (nothingn, resultdef = $void = "untyped", pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 9
                           (assignn, resultdef = $void = "untyped", pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 4
                              (loadn, resultdef = QWord = "QWord", pos = (97,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                 nil
                                 symbol = N
                              )
                              (inlinen, resultdef = QWord = "QWord", pos = (97,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_internal], cmplx = 2, inlinenumber = in_succ_x
                                 (loadn, resultdef = QWord = "QWord", pos = (97,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    nil
                                    symbol = N
                                 )
                              )
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 5
                           (assignn, resultdef = $void = "untyped", pos = (97,30), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 5
                              (vecn, resultdef = QWord = "QWord", pos = (97,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 2
                                 (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (97,30), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    nil
                                    symbol = VETT
                                 )
                                 (typeconvn, resultdef = <no type symbol> = "QWord", pos = (97,35), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                    (loadn, resultdef = QWord = "QWord", pos = (97,35), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                       nil
                                       symbol = N
                                    )
                                 )
                              )
                              (vecn, resultdef = QWord = "QWord", pos = (97,47), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 2
                                 (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (97,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    nil
                                    symbol = TOPCICLO
                                 )
                                 (typeconvn, resultdef = <no type symbol> = "QWord", pos = (97,48), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                    (loadn, resultdef = QWord = "QWord", pos = (97,48), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                       nil
                                       symbol = N
                                    )
                                 )
                              )
                           )

                        )
                     )
                     nil
                     nil
                  )

               )
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (98,24), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (98,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Vettori_boubledec(var MioType_mioarray);
         left =
         (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (98,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (98,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = VETT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (99,29), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (99,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Vettori_azzeradoppivet(var MioType_mioarray);
         left =
         (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (99,28), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (99,28), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = VETT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (100,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (100,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Vettori_boublecre(var MioType_mioarray);
         left =
         (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (100,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (100,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = VETT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (101,9), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (101,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
         (loadn, resultdef = QWord = "QWord", pos = (101,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
            nil
            symbol = IM
         )
         (ordconstn, resultdef = QWord = "QWord", pos = (101,8), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (109,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               (statementn, resultdef = <nil>, pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (nothingn, resultdef = $void = "untyped", pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                  )

               )
               (statementn, resultdef = <nil>, pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (102,8), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                        nil
                        symbol = I
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (102,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 0
                        value = 0
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (whilerepeatn, resultdef = $void = "untyped", pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (gten, resultdef = Boolean = "Boolean", pos = (102,4), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done,nf_internal], cmplx = 2
                        (loadn, resultdef = QWord = "QWord", pos = (102,8), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                           nil
                           symbol = I
                        )
                        (ordconstn, resultdef = QWord = "QWord", pos = (102,17), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 1200
                        )
                     )
                     (blockn, resultdef = $void = "untyped", pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        (statementn, resultdef = <nil>, pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (nothingn, resultdef = $void = "untyped", pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (assignn, resultdef = $void = "untyped", pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 4
                              (loadn, resultdef = QWord = "QWord", pos = (102,8), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                 nil
                                 symbol = I
                              )
                              (inlinen, resultdef = QWord = "QWord", pos = (102,4), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_internal], cmplx = 2, inlinenumber = in_succ_x
                                 (loadn, resultdef = QWord = "QWord", pos = (102,8), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    nil
                                    symbol = I
                                 )
                              )
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (blockn, resultdef = $void = "untyped", pos = (103,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (statementn, resultdef = <nil>, pos = (108,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (ifn, resultdef = $void = "untyped", pos = (104,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                    (unequaln, resultdef = Boolean = "Boolean", pos = (104,14), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
                                       (vecn, resultdef = QWord = "QWord", pos = (104,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 2
                                          (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (104,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                             nil
                                             symbol = VETT
                                          )
                                          (typeconvn, resultdef = <no type symbol> = "QWord", pos = (104,12), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                             (loadn, resultdef = QWord = "QWord", pos = (104,12), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                nil
                                                symbol = I
                                             )
                                          )
                                       )
                                       (ordconstn, resultdef = QWord = "QWord", pos = (104,16), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                          value = 0
                                       )
                                    )
                                    (blockn, resultdef = $void = "untyped", pos = (105,8), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 9
                                       (statementn, resultdef = <nil>, pos = (106,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 9
                                          (assignn, resultdef = $void = "untyped", pos = (106,13), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 5
                                             (vecn, resultdef = QWord = "QWord", pos = (106,21), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 2
                                                (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (106,13), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                   nil
                                                   symbol = MAXCICLO
                                                )
                                                (typeconvn, resultdef = <no type symbol> = "QWord", pos = (106,22), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                                   (loadn, resultdef = QWord = "QWord", pos = (106,22), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                      nil
                                                      symbol = IM
                                                   )
                                                )
                                             )
                                             (vecn, resultdef = QWord = "QWord", pos = (106,31), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 2
                                                (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (106,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                   nil
                                                   symbol = VETT
                                                )
                                                (typeconvn, resultdef = <no type symbol> = "QWord", pos = (106,32), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                                   (loadn, resultdef = QWord = "QWord", pos = (106,32), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                      nil
                                                      symbol = I
                                                   )
                                                )
                                             )
                                          )

                                       )
                                       (statementn, resultdef = <nil>, pos = (107,21), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 4
                                          (assignn, resultdef = $void = "untyped", pos = (107,13), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                                             (loadn, resultdef = QWord = "QWord", pos = (107,13), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                nil
                                                symbol = IM
                                             )
                                             (addn, resultdef = QWord = "QWord", pos = (107,19), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2
                                                (loadn, resultdef = QWord = "QWord", pos = (107,17), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                   nil
                                                   symbol = IM
                                                )
                                                (ordconstn, resultdef = QWord = "QWord", pos = (107,20), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                   value = 1
                                                )
                                             )
                                          )

                                       )
                                    )
                                    nil
                                    nil
                                 )

                              )
                           )

                        )
                     )
                     nil
                     nil
                  )

               )
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (110,12), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (110,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
         (loadn, resultdef = QWord = "QWord", pos = (110,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
            nil
            symbol = IM
         )
         (subn, resultdef = QWord = "QWord", pos = (110,10), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2
            (loadn, resultdef = QWord = "QWord", pos = (110,8), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = IM
            )
            (ordconstn, resultdef = QWord = "QWord", pos = (110,11), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
               value = 1
            )
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (111,31), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (111,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Stampa_stampaquattro(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (111,30), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (111,30), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (112,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (112,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
         (loadn, resultdef = QWord = "QWord", pos = (112,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
            nil
            symbol = M
         )
         (ordconstn, resultdef = QWord = "QWord", pos = (112,6), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (117,8), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (whilerepeatn, resultdef = $void = "untyped", pos = (113,2), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (lten, resultdef = Boolean = "Boolean", pos = (113,9), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
            (loadn, resultdef = QWord = "QWord", pos = (113,8), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = M
            )
            (loadn, resultdef = QWord = "QWord", pos = (113,12), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = IM
            )
         )
         (blockn, resultdef = $void = "untyped", pos = (114,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
            (statementn, resultdef = <nil>, pos = (115,65), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
               (calln, resultdef = $void = "untyped", pos = (115,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  proc = Stampa_stampalinea_Semplificatanozero(var Text;var QWord;var MioType_mioarray);
                  left =
                  (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (115,64), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                     (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (115,64), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = MAXCICLO
                     )

                  )
                  (callparan, resultdef = QWord = "QWord", pos = (115,55), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (115,55), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = M
                     )

                  )
                  (callparan, resultdef = Text = "Text", pos = (115,53), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                     (loadn, resultdef = Text = "Text", pos = (115,53), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                        nil
                        symbol = TFOUT
                     )

                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (116,18), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 4
               (assignn, resultdef = $void = "untyped", pos = (116,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                  (loadn, resultdef = QWord = "QWord", pos = (116,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                     nil
                     symbol = M
                  )
                  (addn, resultdef = QWord = "QWord", pos = (116,15), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (116,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = M
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (116,16), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 12
                     )
                  )
               )

            )
         )
         nil
         nil
      )

   )
   (statementn, resultdef = <nil>, pos = (118,30), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (118,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Stampa_chiusuralong(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (118,29), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (118,29), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (120,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (120,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
         (loadn, resultdef = QWord = "QWord", pos = (120,1), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
            nil
            symbol = I
         )
         (ordconstn, resultdef = QWord = "QWord", pos = (120,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (121,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (121,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
         (loadn, resultdef = QWord = "QWord", pos = (121,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
            nil
            symbol = N
         )
         (ordconstn, resultdef = QWord = "QWord", pos = (121,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (122,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (122,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = $fpc_ansistr_assign(var Pointer;Pointer);
         left =
         (callparan, resultdef = Pointer = "^untyped", pos = (122,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (typeconvn, resultdef = Pointer = "^untyped", pos = (122,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
               (loadn, resultdef = AnsiString = "AnsiString", pos = (122,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                  nil
                  symbol = LINEA
               )
            )

         )
         (callparan, resultdef = Pointer = "^untyped", pos = (122,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
            (niln, resultdef = Pointer = "^untyped", pos = (122,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (124,21), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (123,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 255
               (statementn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = $fpc_ansistr_concat(var RawByteString;const RawByteString;const RawByteString;Word);
                     left =
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = LINEA
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = LINEA
                        )

                     )
                     (callparan, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                        (ordconstn, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 0
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                  )

               )
            )

         )
         (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 255
               (statementn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = $fpc_ansistr_concat(var RawByteString;const RawByteString;const RawByteString;Word);
                     left =
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = LINEA
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = LINEA
                        )

                     )
                     (callparan, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                        (ordconstn, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 0
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                  )

               )
            )

         )
         (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 255
               (statementn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = $fpc_ansistr_concat(var RawByteString;const RawByteString;const RawByteString;Word);
                     left =
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = LINEA
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = LINEA
                        )

                     )
                     (callparan, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                        (ordconstn, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 0
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                  )

               )
            )

         )
         (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 255
               (statementn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = $fpc_ansistr_concat(var RawByteString;const RawByteString;const RawByteString;Word);
                     left =
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = LINEA
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = LINEA
                        )

                     )
                     (callparan, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                        (ordconstn, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 0
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                  )

               )
            )

         )
         (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 255
               (statementn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = $fpc_ansistr_concat(var RawByteString;const RawByteString;const RawByteString;Word);
                     left =
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = LINEA
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = LINEA
                        )

                     )
                     (callparan, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                        (ordconstn, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 0
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                  )

               )
            )

         )
         (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 255
               (statementn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = $fpc_ansistr_concat(var RawByteString;const RawByteString;const RawByteString;Word);
                     left =
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = LINEA
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = LINEA
                        )

                     )
                     (callparan, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                        (ordconstn, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 0
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                  )

               )
            )

         )
         (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 255
               (statementn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = $fpc_ansistr_concat(var RawByteString;const RawByteString;const RawByteString;Word);
                     left =
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = LINEA
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = LINEA
                        )

                     )
                     (callparan, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                        (ordconstn, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 0
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                  )

               )
            )

         )
         (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 255
               (statementn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = $fpc_ansistr_concat(var RawByteString;const RawByteString;const RawByteString;Word);
                     left =
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = LINEA
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = LINEA
                        )

                     )
                     (callparan, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                        (ordconstn, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 0
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                  )

               )
            )

         )
         (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 255
               (statementn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = $fpc_ansistr_concat(var RawByteString;const RawByteString;const RawByteString;Word);
                     left =
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = LINEA
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = LINEA
                        )

                     )
                     (callparan, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                        (ordconstn, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 0
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                  )

               )
            )

         )
         (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 255
               (statementn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = $fpc_ansistr_concat(var RawByteString;const RawByteString;const RawByteString;Word);
                     left =
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = LINEA
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = LINEA
                        )

                     )
                     (callparan, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                        (ordconstn, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 0
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                  )

               )
            )

         )
         (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 255
               (statementn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = $fpc_ansistr_concat(var RawByteString;const RawByteString;const RawByteString;Word);
                     left =
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = LINEA
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = LINEA
                        )

                     )
                     (callparan, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                        (ordconstn, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 0
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                  )

               )
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (125,23), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (125,2), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 255
         (statementn, resultdef = $void = "untyped", pos = (125,2), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (125,2), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               proc = $fpc_ansistr_concat(var RawByteString;const RawByteString;const RawByteString;Word);
               left =
               (callparan, resultdef = RawByteString = "AnsiString", pos = (125,2), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                  (loadn, resultdef = RawByteString = "AnsiString", pos = (125,2), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                     nil
                     symbol = LINEA
                  )

               )
               (callparan, resultdef = RawByteString = "AnsiString", pos = (125,2), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                  (loadn, resultdef = RawByteString = "AnsiString", pos = (125,2), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_modify,nf_address_taken], cmplx = 1
                     nil
                     symbol = LINEA
                  )

               )
               (callparan, resultdef = Word = "Word", pos = (125,2), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                  (ordconstn, resultdef = Word = "Word", pos = (125,2), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                     value = 0
                  )

               )
               (callparan, resultdef = RawByteString = "AnsiString", pos = (125,2), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                  (stringconstn, resultdef = AnsiString = "AnsiString", pos = (125,2), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                  )

               )
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (126,28), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (126,2), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Stampa_stampacinque(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (126,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (126,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (151,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (whilerepeatn, resultdef = $void = "untyped", pos = (127,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (lten, resultdef = Boolean = "Boolean", pos = (127,9), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
            (loadn, resultdef = QWord = "QWord", pos = (127,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = I
            )
            (loadn, resultdef = QWord = "QWord", pos = (127,12), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = IM
            )
         )
         (blockn, resultdef = $void = "untyped", pos = (128,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
            (statementn, resultdef = <nil>, pos = (129,26), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
               (blockn, resultdef = $void = "untyped", pos = (129,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (statementn, resultdef = <nil>, pos = (129,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                     (nothingn, resultdef = $void = "untyped", pos = (129,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (129,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (129,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                        left =
                        (callparan, resultdef = Text = "Text", pos = (129,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                           (loadn, resultdef = Text = "Text", pos = (129,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                              nil
                              symbol = TFOUT
                           )

                        )
                        (callparan, resultdef = ShortString = "ShortString", pos = (129,25), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                           (stringconstn, resultdef = ShortString = "ShortString", pos = (129,25), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                           )

                        )
                        (callparan, resultdef = LongInt = "LongInt", pos = (129,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                           (ordconstn, resultdef = LongInt = "LongInt", pos = (129,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                              value = 0
                           )

                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (129,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (129,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        proc = $fpc_writeln_end(var Text);
                        left =
                        (callparan, resultdef = Text = "Text", pos = (129,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                           (loadn, resultdef = Text = "Text", pos = (129,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                              nil
                              symbol = TFOUT
                           )

                        )
                     )

                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (130,33), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
               (blockn, resultdef = $void = "untyped", pos = (130,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (statementn, resultdef = <nil>, pos = (130,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                     (nothingn, resultdef = $void = "untyped", pos = (130,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (130,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (130,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        proc = $fpc_write_text_uint(LongInt;var Text;QWord);
                        left =
                        (callparan, resultdef = QWord = "QWord", pos = (130,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 3
                           (vecn, resultdef = QWord = "QWord", pos = (130,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 2
                              (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (130,15), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                 nil
                                 symbol = MAXCICLO
                              )
                              (typeconvn, resultdef = <no type symbol> = "QWord", pos = (130,24), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                 (loadn, resultdef = QWord = "QWord", pos = (130,24), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                    nil
                                    symbol = I
                                 )
                              )
                           )

                        )
                        (callparan, resultdef = Text = "Text", pos = (130,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                           (loadn, resultdef = Text = "Text", pos = (130,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                              nil
                              symbol = TFOUT
                           )

                        )
                        (callparan, resultdef = LongInt = "LongInt", pos = (130,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                           (ordconstn, resultdef = LongInt = "LongInt", pos = (130,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                              value = 0
                           )

                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (130,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (130,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        proc = $fpc_write_text_ansistr(LongInt;var Text;const RawByteString);
                        left =
                        (callparan, resultdef = RawByteString = "AnsiString", pos = (130,32), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                           (loadn, resultdef = RawByteString = "AnsiString", pos = (130,32), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                              nil
                              symbol = LINEA
                           )

                        )
                        (callparan, resultdef = Text = "Text", pos = (130,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                           (loadn, resultdef = Text = "Text", pos = (130,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                              nil
                              symbol = TFOUT
                           )

                        )
                        (callparan, resultdef = LongInt = "LongInt", pos = (130,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                           (ordconstn, resultdef = LongInt = "LongInt", pos = (130,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                              value = 0
                           )

                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (130,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (130,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        proc = $fpc_writeln_end(var Text);
                        left =
                        (callparan, resultdef = Text = "Text", pos = (130,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                           (loadn, resultdef = Text = "Text", pos = (130,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                              nil
                              symbol = TFOUT
                           )

                        )
                     )

                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (146,9), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
               (blockn, resultdef = $void = "untyped", pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (statementn, resultdef = <nil>, pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                     (nothingn, resultdef = $void = "untyped", pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                     (blockn, resultdef = $void = "untyped", pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        (statementn, resultdef = <nil>, pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (nothingn, resultdef = $void = "untyped", pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (assignn, resultdef = $void = "untyped", pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 2
                              (loadn, resultdef = QWord = "QWord", pos = (131,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                 nil
                                 symbol = M
                              )
                              (ordconstn, resultdef = QWord = "QWord", pos = (131,6), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 0
                                 value = 0
                              )
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (whilerepeatn, resultdef = $void = "untyped", pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (gten, resultdef = Boolean = "Boolean", pos = (131,6), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done,nf_internal], cmplx = 2
                                 (loadn, resultdef = QWord = "QWord", pos = (131,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    nil
                                    symbol = M
                                 )
                                 (ordconstn, resultdef = QWord = "QWord", pos = (131,19), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                    value = 1200
                                 )
                              )
                              (blockn, resultdef = $void = "untyped", pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 (statementn, resultdef = <nil>, pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                    (nothingn, resultdef = $void = "untyped", pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                    (assignn, resultdef = $void = "untyped", pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 4
                                       (loadn, resultdef = QWord = "QWord", pos = (131,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                          nil
                                          symbol = M
                                       )
                                       (inlinen, resultdef = QWord = "QWord", pos = (131,6), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_internal], cmplx = 2, inlinenumber = in_succ_x
                                          (loadn, resultdef = QWord = "QWord", pos = (131,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                             nil
                                             symbol = M
                                          )
                                       )
                                    )

                                 )
                                 (statementn, resultdef = <nil>, pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                    (blockn, resultdef = $void = "untyped", pos = (132,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                       (statementn, resultdef = <nil>, pos = (145,25), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                          (ifn, resultdef = $void = "untyped", pos = (133,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                             (equaln, resultdef = Boolean = "Boolean", pos = (133,25), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 5
                                                (vecn, resultdef = QWord = "QWord", pos = (133,22), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 2
                                                   (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (133,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                      nil
                                                      symbol = TOPCICLO
                                                   )
                                                   (typeconvn, resultdef = <no type symbol> = "QWord", pos = (133,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                                      (loadn, resultdef = QWord = "QWord", pos = (133,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                         nil
                                                         symbol = M
                                                      )
                                                   )
                                                )
                                                (vecn, resultdef = QWord = "QWord", pos = (133,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 2
                                                   (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (133,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                      nil
                                                      symbol = MAXCICLO
                                                   )
                                                   (typeconvn, resultdef = <no type symbol> = "QWord", pos = (133,35), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                                      (loadn, resultdef = QWord = "QWord", pos = (133,35), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                         nil
                                                         symbol = I
                                                      )
                                                   )
                                                )
                                             )
                                             (ifn, resultdef = $void = "untyped", pos = (135,15), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                (lten, resultdef = Boolean = "Boolean", pos = (135,19), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
                                                   (loadn, resultdef = QWord = "QWord", pos = (135,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                      nil
                                                      symbol = N
                                                   )
                                                   (ordconstn, resultdef = QWord = "QWord", pos = (135,22), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                      value = 12
                                                   )
                                                )
                                                (blockn, resultdef = $void = "untyped", pos = (137,22), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                   (statementn, resultdef = <nil>, pos = (138,78), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                      (ifn, resultdef = $void = "untyped", pos = (138,26), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                         (ltn, resultdef = Boolean = "Boolean", pos = (138,30), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
                                                            (loadn, resultdef = QWord = "QWord", pos = (138,29), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                               nil
                                                               symbol = N
                                                            )
                                                            (ordconstn, resultdef = QWord = "QWord", pos = (138,31), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                               value = 12
                                                            )
                                                         )
                                                         (blockn, resultdef = $void = "untyped", pos = (138,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                            (statementn, resultdef = <nil>, pos = (138,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                               (nothingn, resultdef = $void = "untyped", pos = (138,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                               )

                                                            )
                                                            (statementn, resultdef = <nil>, pos = (138,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                               (calln, resultdef = $void = "untyped", pos = (138,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                                  proc = $fpc_write_text_uint(LongInt;var Text;QWord);
                                                                  left =
                                                                  (callparan, resultdef = QWord = "QWord", pos = (138,52), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                                                     (loadn, resultdef = QWord = "QWord", pos = (138,52), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                                        nil
                                                                        symbol = M
                                                                     )

                                                                  )
                                                                  (callparan, resultdef = Text = "Text", pos = (138,50), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                                                     (loadn, resultdef = Text = "Text", pos = (138,50), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                                                                        nil
                                                                        symbol = TFOUT
                                                                     )

                                                                  )
                                                                  (callparan, resultdef = LongInt = "LongInt", pos = (138,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                                     (ordconstn, resultdef = LongInt = "LongInt", pos = (138,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                                        value = 0
                                                                     )

                                                                  )
                                                               )

                                                            )
                                                            (statementn, resultdef = <nil>, pos = (138,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                               (calln, resultdef = $void = "untyped", pos = (138,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                                  proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                                                                  left =
                                                                  (callparan, resultdef = Text = "Text", pos = (138,50), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                                                     (loadn, resultdef = Text = "Text", pos = (138,50), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                                                                        nil
                                                                        symbol = TFOUT
                                                                     )

                                                                  )
                                                                  (callparan, resultdef = ShortString = "ShortString", pos = (138,57), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                                                                     (stringconstn, resultdef = ShortString = "ShortString", pos = (138,57), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                                                                     )

                                                                  )
                                                                  (callparan, resultdef = LongInt = "LongInt", pos = (138,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                                     (ordconstn, resultdef = LongInt = "LongInt", pos = (138,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                                        value = 0
                                                                     )

                                                                  )
                                                               )

                                                            )
                                                            (statementn, resultdef = <nil>, pos = (138,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                               (calln, resultdef = $void = "untyped", pos = (138,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                                  proc = $fpc_write_end(var Text);
                                                                  left =
                                                                  (callparan, resultdef = Text = "Text", pos = (138,50), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                                                     (loadn, resultdef = Text = "Text", pos = (138,50), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                                                                        nil
                                                                        symbol = TFOUT
                                                                     )

                                                                  )
                                                               )

                                                            )
                                                         )
                                                         (blockn, resultdef = $void = "untyped", pos = (138,64), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                            (statementn, resultdef = <nil>, pos = (138,64), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                               (nothingn, resultdef = $void = "untyped", pos = (138,64), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                               )

                                                            )
                                                            (statementn, resultdef = <nil>, pos = (138,64), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                               (calln, resultdef = $void = "untyped", pos = (138,64), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                                  proc = $fpc_write_text_uint(LongInt;var Text;QWord);
                                                                  left =
                                                                  (callparan, resultdef = QWord = "QWord", pos = (138,77), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                                                     (loadn, resultdef = QWord = "QWord", pos = (138,77), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                                        nil
                                                                        symbol = M
                                                                     )

                                                                  )
                                                                  (callparan, resultdef = Text = "Text", pos = (138,75), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                                                     (loadn, resultdef = Text = "Text", pos = (138,75), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                                                                        nil
                                                                        symbol = TFOUT
                                                                     )

                                                                  )
                                                                  (callparan, resultdef = LongInt = "LongInt", pos = (138,64), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                                     (ordconstn, resultdef = LongInt = "LongInt", pos = (138,64), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                                        value = 0
                                                                     )

                                                                  )
                                                               )

                                                            )
                                                            (statementn, resultdef = <nil>, pos = (138,64), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                               (calln, resultdef = $void = "untyped", pos = (138,64), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                                  proc = $fpc_write_end(var Text);
                                                                  left =
                                                                  (callparan, resultdef = Text = "Text", pos = (138,75), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                                                     (loadn, resultdef = Text = "Text", pos = (138,75), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                                                                        nil
                                                                        symbol = TFOUT
                                                                     )

                                                                  )
                                                               )

                                                            )
                                                         )
                                                         nil
                                                      )

                                                   )
                                                   (statementn, resultdef = <nil>, pos = (140,22), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 4
                                                      (assignn, resultdef = $void = "untyped", pos = (139,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                                                         (loadn, resultdef = QWord = "QWord", pos = (139,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                            nil
                                                            symbol = N
                                                         )
                                                         (addn, resultdef = QWord = "QWord", pos = (139,31), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2
                                                            (loadn, resultdef = QWord = "QWord", pos = (139,30), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                               nil
                                                               symbol = N
                                                            )
                                                            (ordconstn, resultdef = QWord = "QWord", pos = (139,32), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                               value = 1
                                                            )
                                                         )
                                                      )

                                                   )
                                                )
                                                (blockn, resultdef = $void = "untyped", pos = (142,22), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                   (statementn, resultdef = <nil>, pos = (143,31), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                      (assignn, resultdef = $void = "untyped", pos = (143,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                                         (loadn, resultdef = QWord = "QWord", pos = (143,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                            nil
                                                            symbol = N
                                                         )
                                                         (ordconstn, resultdef = QWord = "QWord", pos = (143,30), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                            value = 1
                                                         )
                                                      )

                                                   )
                                                   (statementn, resultdef = <nil>, pos = (144,46), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                      (blockn, resultdef = $void = "untyped", pos = (144,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                         (statementn, resultdef = <nil>, pos = (144,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                            (nothingn, resultdef = $void = "untyped", pos = (144,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                            )

                                                         )
                                                         (statementn, resultdef = <nil>, pos = (144,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                            (calln, resultdef = $void = "untyped", pos = (144,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                               proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                                                               left =
                                                               (callparan, resultdef = Text = "Text", pos = (144,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                                                  (loadn, resultdef = Text = "Text", pos = (144,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                                                                     nil
                                                                     symbol = TFOUT
                                                                  )

                                                               )
                                                               (callparan, resultdef = ShortString = "ShortString", pos = (144,45), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                                                                  (stringconstn, resultdef = ShortString = "ShortString", pos = (144,45), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                                                                  )

                                                               )
                                                               (callparan, resultdef = LongInt = "LongInt", pos = (144,27), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                                  (ordconstn, resultdef = LongInt = "LongInt", pos = (144,27), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                                     value = 0
                                                                  )

                                                               )
                                                            )

                                                         )
                                                         (statementn, resultdef = <nil>, pos = (144,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                            (calln, resultdef = $void = "untyped", pos = (144,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                               proc = $fpc_writeln_end(var Text);
                                                               left =
                                                               (callparan, resultdef = Text = "Text", pos = (144,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                                                  (loadn, resultdef = Text = "Text", pos = (144,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                                                                     nil
                                                                     symbol = TFOUT
                                                                  )

                                                               )
                                                            )

                                                         )
                                                      )

                                                   )
                                                )
                                                nil
                                             )
                                             nil
                                             nil
                                          )

                                       )
                                    )

                                 )
                              )
                              nil
                              nil
                           )

                        )
                     )

                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (148,14), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
               (assignn, resultdef = $void = "untyped", pos = (148,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                  (loadn, resultdef = QWord = "QWord", pos = (148,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                     nil
                     symbol = N
                  )
                  (ordconstn, resultdef = QWord = "QWord", pos = (148,13), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                     value = 1
                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (149,16), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
               (assignn, resultdef = $void = "untyped", pos = (149,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                  (loadn, resultdef = QWord = "QWord", pos = (149,10), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                     nil
                     symbol = I
                  )
                  (addn, resultdef = QWord = "QWord", pos = (149,14), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (149,13), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = I
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (149,15), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 1
                     )
                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (150,29), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
               (blockn, resultdef = $void = "untyped", pos = (150,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (statementn, resultdef = <nil>, pos = (150,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                     (nothingn, resultdef = $void = "untyped", pos = (150,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (150,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (150,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                        left =
                        (callparan, resultdef = Text = "Text", pos = (150,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                           (loadn, resultdef = Text = "Text", pos = (150,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                              nil
                              symbol = TFOUT
                           )

                        )
                        (callparan, resultdef = ShortString = "ShortString", pos = (150,28), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                           (stringconstn, resultdef = ShortString = "ShortString", pos = (150,28), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                           )

                        )
                        (callparan, resultdef = LongInt = "LongInt", pos = (150,10), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                           (ordconstn, resultdef = LongInt = "LongInt", pos = (150,10), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                              value = 0
                           )

                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (150,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (150,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        proc = $fpc_writeln_end(var Text);
                        left =
                        (callparan, resultdef = Text = "Text", pos = (150,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                           (loadn, resultdef = Text = "Text", pos = (150,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                              nil
                              symbol = TFOUT
                           )

                        )
                     )

                  )
               )

            )
         )
         nil
         nil
      )

   )
   (statementn, resultdef = <nil>, pos = (152,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (152,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Stampa_chiusuralong(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (152,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (152,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (153,20), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (153,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = CloseFile(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (153,19), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (153,19), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFCSVOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (154,23), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (154,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = CloseFile(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (154,22), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (154,22), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFCSVTOPOUT
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (155,17), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (155,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = CloseFile(var Text);
         left =
         (callparan, resultdef = Text = "Text", pos = (155,16), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = Text = "Text", pos = (155,16), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
               nil
               symbol = TFOUT
            )

         )
      )

   )
)

*******************************************************************************
right before code generation
$main; Register;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
   (statementn, resultdef = <nil>, pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (nothingn, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
      )

   )
   (statementn, resultdef = <nil>, pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
               (statementn, resultdef = <nil>, pos = (28,36), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (28,2), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = AssignFile(out Text;const RawByteString);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (28,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (28,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken], cmplx = 1
                           nil
                           symbol = TFOUT
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (28,35), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (28,35), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (29,21), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (29,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Rewrite(var Text);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (29,19), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (29,19), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = TFOUT
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (30,45), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (30,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = AssignFile(out Text;const RawByteString);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (30,22), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (30,22), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken], cmplx = 1
                           nil
                           symbol = TFCSVOUT
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (30,44), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (30,44), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (31,22), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (31,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Rewrite(var Text);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (31,20), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (31,20), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = TFCSVOUT
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (32,49), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (32,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = AssignFile(out Text;const RawByteString);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (32,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (32,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken], cmplx = 1
                           nil
                           symbol = TFCSVTOPOUT
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (32,48), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (32,48), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (33,25), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (33,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Rewrite(var Text);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (33,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (33,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = TFCSVTOPOUT
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (34,41), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (34,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Vettori_azzera(var MioType_mioarray;QWord);
                     left =
                     (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (34,25), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (34,25), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = CONTATORI
                        )

                     )
                     (callparan, resultdef = QWord = "QWord", pos = (34,40), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                        (ordconstn, resultdef = QWord = "QWord", pos = (34,40), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 1200
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (35,40), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (35,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Vettori_azzera(var MioType_mioarray;QWord);
                     left =
                     (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (35,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (35,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = TOPCICLO
                        )

                     )
                     (callparan, resultdef = QWord = "QWord", pos = (35,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                        (ordconstn, resultdef = QWord = "QWord", pos = (35,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 1200
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (36,16), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (36,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (36,1), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                        nil
                        symbol = MAXCONTATORE
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (36,15), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 0
                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (blockn, resultdef = $void = "untyped", pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (statementn, resultdef = $void = "untyped", pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        (assignn, resultdef = $void = "untyped", pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 2
                           (loadn, resultdef = QWord = "QWord", pos = (37,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                              nil
                              symbol = M
                           )
                           (ordconstn, resultdef = QWord = "QWord", pos = (37,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 0
                              value = 0
                           )
                        )

                     )
                     (statementn, resultdef = $void = "untyped", pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        (whilerepeatn, resultdef = $void = "untyped", pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           (gten, resultdef = Boolean = "Boolean", pos = (37,1), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done,nf_internal], cmplx = 2
                              (loadn, resultdef = QWord = "QWord", pos = (37,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                 nil
                                 symbol = M
                              )
                              (ordconstn, resultdef = QWord = "QWord", pos = (37,13), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                 value = 1200
                              )
                           )
                           (blockn, resultdef = $void = "untyped", pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (statementn, resultdef = <nil>, pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (nothingn, resultdef = $void = "untyped", pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (assignn, resultdef = $void = "untyped", pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 4
                                    (loadn, resultdef = QWord = "QWord", pos = (37,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                       nil
                                       symbol = M
                                    )
                                    (inlinen, resultdef = QWord = "QWord", pos = (37,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_internal], cmplx = 2, inlinenumber = in_succ_x
                                       (loadn, resultdef = QWord = "QWord", pos = (37,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                          nil
                                          symbol = M
                                       )
                                    )
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (37,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (blockn, resultdef = $void = "untyped", pos = (37,30), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                    (statementn, resultdef = <nil>, pos = (38,8), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (assignn, resultdef = $void = "untyped", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 3
                                          (loadn, resultdef = QWord = "QWord", pos = (38,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                             nil
                                             symbol = N
                                          )
                                          (loadn, resultdef = QWord = "QWord", pos = (38,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                             nil
                                             symbol = M
                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (39,16), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (assignn, resultdef = $void = "untyped", pos = (39,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                          (loadn, resultdef = QWord = "QWord", pos = (39,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                             nil
                                             symbol = CONTATORE
                                          )
                                          (ordconstn, resultdef = QWord = "QWord", pos = (39,15), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                             value = 0
                                          )
                                       )

                                    )
                                    (statementn, resultdef = $void = "untyped", pos = (48,16), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                       (whilerepeatn, resultdef = $void = "untyped", pos = (40,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                          (equaln, resultdef = Boolean = "Boolean", pos = (48,9), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
                                             (loadn, resultdef = QWord = "QWord", pos = (48,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                nil
                                                symbol = N
                                             )
                                             (ordconstn, resultdef = QWord = "QWord", pos = (48,14), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                value = 1
                                             )
                                          )
                                          (blockn, resultdef = $void = "untyped", pos = (48,9), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                             (statementn, resultdef = <nil>, pos = (44,18), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (ifn, resultdef = $void = "untyped", pos = (41,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                   (equaln, resultdef = Boolean = "Boolean", pos = (41,9), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
                                                      (andn, resultdef = QWord = "QWord", pos = (41,12), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2
                                                         (loadn, resultdef = QWord = "QWord", pos = (41,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                            nil
                                                            symbol = N
                                                         )
                                                         (ordconstn, resultdef = QWord = "QWord", pos = (41,16), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                            value = 1
                                                         )
                                                      )
                                                      (ordconstn, resultdef = QWord = "QWord", pos = (41,20), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 0
                                                      )
                                                   )
                                                   (assignn, resultdef = $void = "untyped", pos = (42,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                                                      (loadn, resultdef = QWord = "QWord", pos = (42,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                         nil
                                                         symbol = N
                                                      )
                                                      (shrn, resultdef = QWord = "QWord", pos = (42,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_pass1_done], cmplx = 2
                                                         (loadn, resultdef = QWord = "QWord", pos = (42,13), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                            nil
                                                            symbol = N
                                                         )
                                                         (ordconstn, resultdef = Int64 = "Int64", pos = (42,19), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                            value = 1
                                                         )
                                                      )
                                                   )
                                                   (assignn, resultdef = $void = "untyped", pos = (44,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 10
                                                      (loadn, resultdef = QWord = "QWord", pos = (44,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                         nil
                                                         symbol = N
                                                      )
                                                      (addn, resultdef = QWord = "QWord", pos = (44,16), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 8
                                                         (muln, resultdef = QWord = "QWord", pos = (44,14), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 7
                                                            (ordconstn, resultdef = QWord = "QWord", pos = (44,13), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                               value = 3
                                                            )
                                                            (loadn, resultdef = QWord = "QWord", pos = (44,15), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                               nil
                                                               symbol = N
                                                            )
                                                         )
                                                         (ordconstn, resultdef = QWord = "QWord", pos = (44,17), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                            value = 1
                                                         )
                                                      )
                                                   )
                                                   nil
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (45,38), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (blockn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                   (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                      (nothingn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                      )

                                                   )
                                                   (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                      (tempcreaten, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                         size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EDEC2C0
                                                         [ti_may_be_in_reg]
                                                         tempinit =
                                                         nil
                                                      )

                                                   )
                                                   (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                      (assignn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                         (temprefn, resultdef = Pointer = "^untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                            temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC2C0 flags = [ti_may_be_in_reg])
                                                         )
                                                         (typeconvn, resultdef = Pointer = "^untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_equal, convnodeflags = []
                                                            (calln, resultdef = PText = "^Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                                                               proc = $fpc_get_output:^Text;
                                                            )
                                                         )
                                                      )

                                                   )
                                                   (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                      (calln, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                         proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                                                         left =
                                                         (callparan, resultdef = ShortString = "ShortString", pos = (45,19), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                                                            (stringconstn, resultdef = ShortString = "ShortString", pos = (45,19), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                                                            )

                                                         )
                                                         (callparan, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                            (typeconvn, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                               (derefn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                                  (temprefn, resultdef = Pointer = "^untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                                     temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC2C0 flags = [ti_may_be_in_reg])
                                                                  )
                                                               )
                                                            )

                                                         )
                                                         (callparan, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                            (ordconstn, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                               value = 0
                                                            )

                                                         )
                                                      )

                                                   )
                                                   (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                      (calln, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                         proc = $fpc_write_text_char(LongInt;var Text;Char);
                                                         left =
                                                         (callparan, resultdef = Char = "Char", pos = (45,23), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                            (ordconstn, resultdef = Char = "Char", pos = (45,23), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                               value = 32
                                                            )

                                                         )
                                                         (callparan, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                            (typeconvn, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                               (derefn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                                  (temprefn, resultdef = Pointer = "^untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                                     temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC2C0 flags = [ti_may_be_in_reg])
                                                                  )
                                                               )
                                                            )

                                                         )
                                                         (callparan, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                            (ordconstn, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                               value = 0
                                                            )

                                                         )
                                                      )

                                                   )
                                                   (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                      (calln, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                         proc = $fpc_write_text_uint(LongInt;var Text;QWord);
                                                         left =
                                                         (callparan, resultdef = QWord = "QWord", pos = (45,25), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                                            (loadn, resultdef = QWord = "QWord", pos = (45,25), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                               nil
                                                               symbol = M
                                                            )

                                                         )
                                                         (callparan, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                            (typeconvn, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                               (derefn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                                  (temprefn, resultdef = Pointer = "^untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                                     temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC2C0 flags = [ti_may_be_in_reg])
                                                                  )
                                                               )
                                                            )

                                                         )
                                                         (callparan, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                            (ordconstn, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                               value = 0
                                                            )

                                                         )
                                                      )

                                                   )
                                                   (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                      (calln, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                         proc = $fpc_write_text_char(LongInt;var Text;Char);
                                                         left =
                                                         (callparan, resultdef = Char = "Char", pos = (45,29), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                            (ordconstn, resultdef = Char = "Char", pos = (45,29), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                               value = 32
                                                            )

                                                         )
                                                         (callparan, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                            (typeconvn, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                               (derefn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                                  (temprefn, resultdef = Pointer = "^untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                                     temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC2C0 flags = [ti_may_be_in_reg])
                                                                  )
                                                               )
                                                            )

                                                         )
                                                         (callparan, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                            (ordconstn, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                               value = 0
                                                            )

                                                         )
                                                      )

                                                   )
                                                   (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                      (calln, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                         proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                                                         left =
                                                         (callparan, resultdef = ShortString = "ShortString", pos = (45,35), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                                                            (stringconstn, resultdef = ShortString = "ShortString", pos = (45,35), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                                                            )

                                                         )
                                                         (callparan, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                            (typeconvn, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                               (derefn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                                  (temprefn, resultdef = Pointer = "^untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                                     temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC2C0 flags = [ti_may_be_in_reg])
                                                                  )
                                                               )
                                                            )

                                                         )
                                                         (callparan, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                            (ordconstn, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                               value = 0
                                                            )

                                                         )
                                                      )

                                                   )
                                                   (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                      (calln, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                         proc = $fpc_write_text_uint(LongInt;var Text;QWord);
                                                         left =
                                                         (callparan, resultdef = QWord = "QWord", pos = (45,37), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                                            (loadn, resultdef = QWord = "QWord", pos = (45,37), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                               nil
                                                               symbol = N
                                                            )

                                                         )
                                                         (callparan, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                            (typeconvn, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                               (derefn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                                  (temprefn, resultdef = Pointer = "^untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                                     temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC2C0 flags = [ti_may_be_in_reg])
                                                                  )
                                                               )
                                                            )

                                                         )
                                                         (callparan, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                            (ordconstn, resultdef = LongInt = "LongInt", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                               value = 0
                                                            )

                                                         )
                                                      )

                                                   )
                                                   (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                      (calln, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                         proc = $fpc_writeln_end(var Text);
                                                         left =
                                                         (callparan, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                            (typeconvn, resultdef = Text = "Text", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                               (derefn, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                                  (temprefn, resultdef = Pointer = "^untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                                     temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC2C0 flags = [ti_may_be_in_reg])
                                                                  )
                                                               )
                                                            )

                                                         )
                                                      )

                                                   )
                                                   (statementn, resultdef = <nil>, pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                                                      (tempdeleten, resultdef = $void = "untyped", pos = (45,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                         release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EDEC2C0
                                                      )

                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (46,31), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (assignn, resultdef = $void = "untyped", pos = (46,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                                                   (loadn, resultdef = QWord = "QWord", pos = (46,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                      nil
                                                      symbol = CONTATORE
                                                   )
                                                   (addn, resultdef = QWord = "QWord", pos = (46,28), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2
                                                      (loadn, resultdef = QWord = "QWord", pos = (46,18), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                         nil
                                                         symbol = CONTATORE
                                                      )
                                                      (ordconstn, resultdef = QWord = "QWord", pos = (46,30), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                         value = 1
                                                      )
                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (47,44), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (ifn, resultdef = $void = "untyped", pos = (47,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                   (gtn, resultdef = Boolean = "Boolean", pos = (47,12), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 4
                                                      (loadn, resultdef = QWord = "QWord", pos = (47,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                         nil
                                                         symbol = N
                                                      )
                                                      (vecn, resultdef = QWord = "QWord", pos = (47,22), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 2
                                                         (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (47,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                            nil
                                                            symbol = TOPCICLO
                                                         )
                                                         (typeconvn, resultdef = <no type symbol> = "QWord", pos = (47,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                                            (loadn, resultdef = QWord = "QWord", pos = (47,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                               nil
                                                               symbol = M
                                                            )
                                                         )
                                                      )
                                                   )
                                                   (assignn, resultdef = $void = "untyped", pos = (47,30), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                                                      (vecn, resultdef = QWord = "QWord", pos = (47,38), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 2
                                                         (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (47,30), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                            nil
                                                            symbol = TOPCICLO
                                                         )
                                                         (typeconvn, resultdef = <no type symbol> = "QWord", pos = (47,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                                            (loadn, resultdef = QWord = "QWord", pos = (47,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                               nil
                                                               symbol = M
                                                            )
                                                         )
                                                      )
                                                      (loadn, resultdef = QWord = "QWord", pos = (47,43), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                         nil
                                                         symbol = N
                                                      )
                                                   )
                                                   nil
                                                   nil
                                                )

                                             )
                                          )
                                          nil
                                          nil
                                       )

                                    )
                                    (statementn, resultdef = $void = "untyped", pos = (49,60), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                       (ifn, resultdef = $void = "untyped", pos = (49,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                          (gtn, resultdef = Boolean = "Boolean", pos = (49,17), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
                                             (loadn, resultdef = QWord = "QWord", pos = (49,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                nil
                                                symbol = CONTATORE
                                             )
                                             (loadn, resultdef = QWord = "QWord", pos = (49,19), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                nil
                                                symbol = MAXCONTATORE
                                             )
                                          )
                                          (assignn, resultdef = $void = "untyped", pos = (49,37), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 3
                                             (loadn, resultdef = QWord = "QWord", pos = (49,37), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                nil
                                                symbol = MAXCONTATORE
                                             )
                                             (loadn, resultdef = QWord = "QWord", pos = (49,51), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                nil
                                                symbol = CONTATORE
                                             )
                                          )
                                          nil
                                          nil
                                       )

                                    )
                                    (statementn, resultdef = $void = "untyped", pos = (50,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                       (blockn, resultdef = $void = "untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                          (statementn, resultdef = <nil>, pos = (50,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                             (nothingn, resultdef = $void = "untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                             )

                                          )
                                          (statementn, resultdef = <nil>, pos = (50,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                             (tempcreaten, resultdef = $void = "untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EDEC340
                                                [ti_may_be_in_reg]
                                                tempinit =
                                                nil
                                             )

                                          )
                                          (statementn, resultdef = <nil>, pos = (50,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                             (assignn, resultdef = $void = "untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                (temprefn, resultdef = Pointer = "^untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                   temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC340 flags = [ti_may_be_in_reg])
                                                )
                                                (typeconvn, resultdef = Pointer = "^untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_equal, convnodeflags = []
                                                   (calln, resultdef = PText = "^Text", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                                                      proc = $fpc_get_output:^Text;
                                                   )
                                                )
                                             )

                                          )
                                          (statementn, resultdef = <nil>, pos = (50,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                             (calln, resultdef = $void = "untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                proc = $fpc_writeln_end(var Text);
                                                left =
                                                (callparan, resultdef = Text = "Text", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                   (typeconvn, resultdef = Text = "Text", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                      (derefn, resultdef = $void = "untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                         (temprefn, resultdef = Pointer = "^untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                            temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC340 flags = [ti_may_be_in_reg])
                                                         )
                                                      )
                                                   )

                                                )
                                             )

                                          )
                                          (statementn, resultdef = <nil>, pos = (50,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                                             (tempdeleten, resultdef = $void = "untyped", pos = (50,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EDEC340
                                             )

                                          )
                                       )

                                    )
                                    (statementn, resultdef = $void = "untyped", pos = (51,51), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                       (blockn, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                          (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                             (nothingn, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                             )

                                          )
                                          (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                             (tempcreaten, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EDEC3C0
                                                [ti_may_be_in_reg]
                                                tempinit =
                                                nil
                                             )

                                          )
                                          (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                             (assignn, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                (temprefn, resultdef = Pointer = "^untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                   temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC3C0 flags = [ti_may_be_in_reg])
                                                )
                                                (typeconvn, resultdef = Pointer = "^untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_equal, convnodeflags = []
                                                   (calln, resultdef = PText = "^Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                                                      proc = $fpc_get_output:^Text;
                                                   )
                                                )
                                             )

                                          )
                                          (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                             (calln, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                                                left =
                                                (callparan, resultdef = ShortString = "ShortString", pos = (51,18), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                                                   (stringconstn, resultdef = ShortString = "ShortString", pos = (51,18), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                                                   )

                                                )
                                                (callparan, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                   (typeconvn, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                      (derefn, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                         (temprefn, resultdef = Pointer = "^untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                            temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC3C0 flags = [ti_may_be_in_reg])
                                                         )
                                                      )
                                                   )

                                                )
                                                (callparan, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                   (ordconstn, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                      value = 0
                                                   )

                                                )
                                             )

                                          )
                                          (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                             (calln, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                proc = $fpc_write_text_uint(LongInt;var Text;QWord);
                                                left =
                                                (callparan, resultdef = QWord = "QWord", pos = (51,20), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                                   (loadn, resultdef = QWord = "QWord", pos = (51,20), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                      nil
                                                      symbol = M
                                                   )

                                                )
                                                (callparan, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                   (typeconvn, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                      (derefn, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                         (temprefn, resultdef = Pointer = "^untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                            temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC3C0 flags = [ti_may_be_in_reg])
                                                         )
                                                      )
                                                   )

                                                )
                                                (callparan, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                   (ordconstn, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                      value = 0
                                                   )

                                                )
                                             )

                                          )
                                          (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                             (calln, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                proc = $fpc_write_text_char(LongInt;var Text;Char);
                                                left =
                                                (callparan, resultdef = Char = "Char", pos = (51,24), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                   (ordconstn, resultdef = Char = "Char", pos = (51,24), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                      value = 32
                                                   )

                                                )
                                                (callparan, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                   (typeconvn, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                      (derefn, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                         (temprefn, resultdef = Pointer = "^untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                            temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC3C0 flags = [ti_may_be_in_reg])
                                                         )
                                                      )
                                                   )

                                                )
                                                (callparan, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                   (ordconstn, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                      value = 0
                                                   )

                                                )
                                             )

                                          )
                                          (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                             (calln, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                                                left =
                                                (callparan, resultdef = ShortString = "ShortString", pos = (51,39), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                                                   (stringconstn, resultdef = ShortString = "ShortString", pos = (51,39), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                                                   )

                                                )
                                                (callparan, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                   (typeconvn, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                      (derefn, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                         (temprefn, resultdef = Pointer = "^untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                            temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC3C0 flags = [ti_may_be_in_reg])
                                                         )
                                                      )
                                                   )

                                                )
                                                (callparan, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                   (ordconstn, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                      value = 0
                                                   )

                                                )
                                             )

                                          )
                                          (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                             (calln, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                proc = $fpc_write_text_uint(LongInt;var Text;QWord);
                                                left =
                                                (callparan, resultdef = QWord = "QWord", pos = (51,50), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 2
                                                   (loadn, resultdef = QWord = "QWord", pos = (51,50), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                      nil
                                                      symbol = CONTATORE
                                                   )

                                                )
                                                (callparan, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                   (typeconvn, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                      (derefn, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                         (temprefn, resultdef = Pointer = "^untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                            temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC3C0 flags = [ti_may_be_in_reg])
                                                         )
                                                      )
                                                   )

                                                )
                                                (callparan, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                   (ordconstn, resultdef = LongInt = "LongInt", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                      value = 0
                                                   )

                                                )
                                             )

                                          )
                                          (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                             (calln, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                proc = $fpc_writeln_end(var Text);
                                                left =
                                                (callparan, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                                                   (typeconvn, resultdef = Text = "Text", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                                      (derefn, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                         (temprefn, resultdef = Pointer = "^untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                            temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC3C0 flags = [ti_may_be_in_reg])
                                                         )
                                                      )
                                                   )

                                                )
                                             )

                                          )
                                          (statementn, resultdef = <nil>, pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                                             (tempdeleten, resultdef = $void = "untyped", pos = (51,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EDEC3C0
                                             )

                                          )
                                       )

                                    )
                                    (statementn, resultdef = $void = "untyped", pos = (52,49), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 10
                                       (blockn, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 6
                                          (statementn, resultdef = <nil>, pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 6
                                             (nothingn, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                             )

                                          )
                                          (statementn, resultdef = <nil>, pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 6
                                             (blockn, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                (statementn, resultdef = <nil>, pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                                                   (nothingn, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                   )

                                                )
                                                (statementn, resultdef = <nil>, pos = (52,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                                                   (tempcreaten, resultdef = $void = "untyped", pos = (52,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                      size = 8, temptypedef = <no type symbol> = "^MioType_mioarray", tempinfo = $000000007EDEC5C0
                                                      [ti_may_be_in_reg,ti_const,ti_cleanup_only]
                                                      tempinit =
                                                      (assignn, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                                                         (temprefn, resultdef = <no type symbol> = "^MioType_mioarray", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                            temptypedef = <no type symbol> = "^MioType_mioarray", (tempinfo = $000000007EDEC5C0 flags = [ti_may_be_in_reg,ti_const,ti_cleanup_only])
                                                         )
                                                         (typeconvn, resultdef = <no type symbol> = "^MioType_mioarray", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2, convtype = tc_equal, convnodeflags = []
                                                            (addrn, resultdef = Pointer = "^untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_internal], cmplx = 2, addrnodeflags = []
                                                               (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (52,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken], cmplx = 1
                                                                  nil
                                                                  symbol = CONTATORI
                                                               )
                                                            )
                                                         )
                                                      )
                                                   )

                                                )
                                             )

                                          )
                                          (statementn, resultdef = <nil>, pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 6
                                             (assignn, resultdef = $void = "untyped", pos = (52,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 6
                                                (vecn, resultdef = QWord = "QWord", pos = (52,13), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 2
                                                   (derefn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (52,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                      (temprefn, resultdef = <no type symbol> = "^MioType_mioarray", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                         temptypedef = <no type symbol> = "^MioType_mioarray", (tempinfo = $000000007EDEC5C0 flags = [ti_may_be_in_reg,ti_const,ti_cleanup_only])
                                                      )
                                                   )
                                                   (typeconvn, resultdef = <no type symbol> = "QWord", pos = (52,14), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                                      (loadn, resultdef = QWord = "QWord", pos = (52,14), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                         nil
                                                         symbol = CONTATORE
                                                      )
                                                   )
                                                )
                                                (addn, resultdef = QWord = "QWord", pos = (52,47), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 3
                                                   (vecn, resultdef = QWord = "QWord", pos = (52,36), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 2
                                                      (derefn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (52,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                         (temprefn, resultdef = <no type symbol> = "^MioType_mioarray", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                            temptypedef = <no type symbol> = "^MioType_mioarray", (tempinfo = $000000007EDEC5C0 flags = [ti_may_be_in_reg,ti_const,ti_cleanup_only])
                                                         )
                                                      )
                                                      (typeconvn, resultdef = <no type symbol> = "QWord", pos = (52,37), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                                         (loadn, resultdef = QWord = "QWord", pos = (52,37), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                            nil
                                                            symbol = CONTATORE
                                                         )
                                                      )
                                                   )
                                                   (ordconstn, resultdef = QWord = "QWord", pos = (52,48), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                      value = 1
                                                   )
                                                )
                                             )

                                          )
                                       )

                                    )
                                    (statementn, resultdef = $void = "untyped", pos = (53,24), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                                       (assignn, resultdef = $void = "untyped", pos = (53,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                                          (vecn, resultdef = QWord = "QWord", pos = (53,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 2
                                             (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (53,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                nil
                                                symbol = NUMERI
                                             )
                                             (typeconvn, resultdef = <no type symbol> = "QWord", pos = (53,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                                (loadn, resultdef = QWord = "QWord", pos = (53,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                   nil
                                                   symbol = M
                                                )
                                             )
                                          )
                                          (loadn, resultdef = QWord = "QWord", pos = (53,15), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                             nil
                                             symbol = CONTATORE
                                          )
                                       )

                                    )
                                 )

                              )
                           )
                           nil
                           nil
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (58,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (58,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (58,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                        nil
                        symbol = M
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (58,6), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 1
                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (59,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (59,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Stampa_stampauno_Semplificata(var Text);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (59,38), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (59,38), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = TFOUT
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (64,8), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (whilerepeatn, resultdef = $void = "untyped", pos = (60,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (lten, resultdef = Boolean = "Boolean", pos = (60,8), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
                        (loadn, resultdef = QWord = "QWord", pos = (60,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = M
                        )
                        (ordconstn, resultdef = QWord = "QWord", pos = (60,11), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 1200
                        )
                     )
                     (blockn, resultdef = $void = "untyped", pos = (61,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        (statementn, resultdef = <nil>, pos = (62,58), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (calln, resultdef = $void = "untyped", pos = (62,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              proc = Stampa_stampalinea_Semplificata(var Text;var QWord;var MioType_mioarray);
                              left =
                              (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (62,57), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                 (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (62,57), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                    nil
                                    symbol = NUMERI
                                 )

                              )
                              (callparan, resultdef = QWord = "QWord", pos = (62,50), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                 (loadn, resultdef = QWord = "QWord", pos = (62,50), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                    nil
                                    symbol = M
                                 )

                              )
                              (callparan, resultdef = Text = "Text", pos = (62,48), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                 (loadn, resultdef = Text = "Text", pos = (62,48), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                    nil
                                    symbol = TFOUT
                                 )

                              )
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (63,18), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 4
                           (assignn, resultdef = $void = "untyped", pos = (63,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                              (loadn, resultdef = QWord = "QWord", pos = (63,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                 nil
                                 symbol = M
                              )
                              (addn, resultdef = QWord = "QWord", pos = (63,15), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2
                                 (loadn, resultdef = QWord = "QWord", pos = (63,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    nil
                                    symbol = M
                                 )
                                 (ordconstn, resultdef = QWord = "QWord", pos = (63,16), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                    value = 12
                                 )
                              )
                           )

                        )
                     )
                     nil
                     nil
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (65,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (65,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Stampa_chiusuralong(var Text);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (65,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (65,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = TFOUT
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (66,26), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (66,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Stampa_stampadue(var Text);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (66,25), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (66,25), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = TFOUT
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (67,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (67,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (67,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                        nil
                        symbol = M
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (67,6), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 1
                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (72,8), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (whilerepeatn, resultdef = $void = "untyped", pos = (68,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (lten, resultdef = Boolean = "Boolean", pos = (68,8), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
                        (loadn, resultdef = QWord = "QWord", pos = (68,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = M
                        )
                        (loadn, resultdef = QWord = "QWord", pos = (68,11), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = MAXCONTATORE
                        )
                     )
                     (blockn, resultdef = $void = "untyped", pos = (69,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        (statementn, resultdef = <nil>, pos = (70,45), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (calln, resultdef = $void = "untyped", pos = (70,8), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              proc = Stampa_stampalinea(var Text;var QWord;var MioType_mioarray);
                              left =
                              (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (70,44), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                 (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (70,44), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                    nil
                                    symbol = CONTATORI
                                 )

                              )
                              (callparan, resultdef = QWord = "QWord", pos = (70,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                 (loadn, resultdef = QWord = "QWord", pos = (70,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                    nil
                                    symbol = M
                                 )

                              )
                              (callparan, resultdef = Text = "Text", pos = (70,32), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                 (loadn, resultdef = Text = "Text", pos = (70,32), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                    nil
                                    symbol = TFOUT
                                 )

                              )
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (71,14), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 4
                           (assignn, resultdef = $void = "untyped", pos = (71,8), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                              (loadn, resultdef = QWord = "QWord", pos = (71,8), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                 nil
                                 symbol = M
                              )
                              (addn, resultdef = QWord = "QWord", pos = (71,12), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2
                                 (loadn, resultdef = QWord = "QWord", pos = (71,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    nil
                                    symbol = M
                                 )
                                 (ordconstn, resultdef = QWord = "QWord", pos = (71,13), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                    value = 6
                                 )
                              )
                           )

                        )
                     )
                     nil
                     nil
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (73,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (73,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Stampa_chiusuralong(var Text);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (73,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (73,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = TFOUT
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (74,24), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (74,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Stampa_stampatre(var Text);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (74,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (74,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = TFOUT
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (75,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (75,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (75,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                        nil
                        symbol = M
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (75,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 1
                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (80,8), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (whilerepeatn, resultdef = $void = "untyped", pos = (76,2), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (lten, resultdef = Boolean = "Boolean", pos = (76,9), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
                        (loadn, resultdef = QWord = "QWord", pos = (76,8), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = M
                        )
                        (ordconstn, resultdef = QWord = "QWord", pos = (76,12), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 1200
                        )
                     )
                     (blockn, resultdef = $void = "untyped", pos = (77,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        (statementn, resultdef = <nil>, pos = (78,46), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (calln, resultdef = $void = "untyped", pos = (78,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              proc = Stampa_stampalinea(var Text;var QWord;var MioType_mioarray);
                              left =
                              (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (78,45), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                 (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (78,45), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                    nil
                                    symbol = TOPCICLO
                                 )

                              )
                              (callparan, resultdef = QWord = "QWord", pos = (78,36), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                 (loadn, resultdef = QWord = "QWord", pos = (78,36), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                    nil
                                    symbol = M
                                 )

                              )
                              (callparan, resultdef = Text = "Text", pos = (78,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                 (loadn, resultdef = Text = "Text", pos = (78,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                    nil
                                    symbol = TFOUT
                                 )

                              )
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (79,17), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 4
                           (assignn, resultdef = $void = "untyped", pos = (79,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                              (loadn, resultdef = QWord = "QWord", pos = (79,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                 nil
                                 symbol = M
                              )
                              (addn, resultdef = QWord = "QWord", pos = (79,15), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2
                                 (loadn, resultdef = QWord = "QWord", pos = (79,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    nil
                                    symbol = M
                                 )
                                 (ordconstn, resultdef = QWord = "QWord", pos = (79,16), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                    value = 6
                                 )
                              )
                           )

                        )
                     )
                     nil
                     nil
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (81,28), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (81,2), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Stampa_chiusuralong(var Text);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (81,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (81,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = TFOUT
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (82,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (82,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (82,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                        nil
                        symbol = N
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (82,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 1
                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (87,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (whilerepeatn, resultdef = $void = "untyped", pos = (83,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (lten, resultdef = Boolean = "Boolean", pos = (83,8), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
                        (loadn, resultdef = QWord = "QWord", pos = (83,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = N
                        )
                        (loadn, resultdef = QWord = "QWord", pos = (83,10), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = MAXCONTATORE
                        )
                     )
                     (blockn, resultdef = $void = "untyped", pos = (84,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        (statementn, resultdef = <nil>, pos = (85,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (calln, resultdef = $void = "untyped", pos = (85,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              proc = Stampa_stampacsv(var Text;var QWord;var MioType_mioarray);
                              left =
                              (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (85,38), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                 (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (85,38), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                    nil
                                    symbol = CONTATORI
                                 )

                              )
                              (callparan, resultdef = QWord = "QWord", pos = (85,28), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                 (loadn, resultdef = QWord = "QWord", pos = (85,28), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                    nil
                                    symbol = N
                                 )

                              )
                              (callparan, resultdef = Text = "Text", pos = (85,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                 (loadn, resultdef = Text = "Text", pos = (85,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                    nil
                                    symbol = TFCSVOUT
                                 )

                              )
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (86,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 4
                           (assignn, resultdef = $void = "untyped", pos = (86,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                              (loadn, resultdef = QWord = "QWord", pos = (86,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                 nil
                                 symbol = N
                              )
                              (addn, resultdef = QWord = "QWord", pos = (86,5), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2
                                 (loadn, resultdef = QWord = "QWord", pos = (86,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    nil
                                    symbol = N
                                 )
                                 (ordconstn, resultdef = QWord = "QWord", pos = (86,6), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                    value = 1
                                 )
                              )
                           )

                        )
                     )
                     nil
                     nil
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (88,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (88,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (88,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                        nil
                        symbol = N
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (88,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 1
                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (93,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (whilerepeatn, resultdef = $void = "untyped", pos = (89,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (lten, resultdef = Boolean = "Boolean", pos = (89,8), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
                        (loadn, resultdef = QWord = "QWord", pos = (89,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = N
                        )
                        (ordconstn, resultdef = QWord = "QWord", pos = (89,10), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 1200
                        )
                     )
                     (blockn, resultdef = $void = "untyped", pos = (90,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        (statementn, resultdef = <nil>, pos = (91,41), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (calln, resultdef = $void = "untyped", pos = (91,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              proc = Stampa_stampacsv(var Text;var QWord;var MioType_mioarray);
                              left =
                              (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (91,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                 (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (91,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                    nil
                                    symbol = TOPCICLO
                                 )

                              )
                              (callparan, resultdef = QWord = "QWord", pos = (91,31), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                 (loadn, resultdef = QWord = "QWord", pos = (91,31), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                    nil
                                    symbol = N
                                 )

                              )
                              (callparan, resultdef = Text = "Text", pos = (91,29), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                 (loadn, resultdef = Text = "Text", pos = (91,29), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                    nil
                                    symbol = TFCSVTOPOUT
                                 )

                              )
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (92,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 4
                           (assignn, resultdef = $void = "untyped", pos = (92,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                              (loadn, resultdef = QWord = "QWord", pos = (92,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                 nil
                                 symbol = N
                              )
                              (addn, resultdef = QWord = "QWord", pos = (92,5), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2
                                 (loadn, resultdef = QWord = "QWord", pos = (92,4), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    nil
                                    symbol = N
                                 )
                                 (ordconstn, resultdef = QWord = "QWord", pos = (92,6), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                    value = 1
                                 )
                              )
                           )

                        )
                     )
                     nil
                     nil
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (95,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (blockn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (nothingn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (tempcreaten, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           size = 8, temptypedef = Pointer = "^untyped", tempinfo = $000000007EDEC440
                           [ti_may_be_in_reg]
                           tempinit =
                           nil
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (assignn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           (temprefn, resultdef = Pointer = "^untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                              temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC440 flags = [ti_may_be_in_reg])
                           )
                           (typeconvn, resultdef = Pointer = "^untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255, convtype = tc_equal, convnodeflags = []
                              (calln, resultdef = PText = "^Text", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 255
                                 proc = $fpc_get_output:^Text;
                              )
                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (calln, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                           left =
                           (callparan, resultdef = ShortString = "ShortString", pos = (95,24), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                              (stringconstn, resultdef = ShortString = "ShortString", pos = (95,24), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                              )

                           )
                           (callparan, resultdef = Text = "Text", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                              (typeconvn, resultdef = Text = "Text", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                 (derefn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    (temprefn, resultdef = Pointer = "^untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                       temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC440 flags = [ti_may_be_in_reg])
                                    )
                                 )
                              )

                           )
                           (callparan, resultdef = LongInt = "LongInt", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                              (ordconstn, resultdef = LongInt = "LongInt", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                 value = 0
                              )

                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (calln, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           proc = $fpc_write_text_uint(LongInt;var Text;QWord);
                           left =
                           (callparan, resultdef = QWord = "QWord", pos = (95,38), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 2
                              (loadn, resultdef = QWord = "QWord", pos = (95,38), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                 nil
                                 symbol = MAXCONTATORE
                              )

                           )
                           (callparan, resultdef = Text = "Text", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                              (typeconvn, resultdef = Text = "Text", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                 (derefn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    (temprefn, resultdef = Pointer = "^untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                       temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC440 flags = [ti_may_be_in_reg])
                                    )
                                 )
                              )

                           )
                           (callparan, resultdef = LongInt = "LongInt", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                              (ordconstn, resultdef = LongInt = "LongInt", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                 value = 0
                              )

                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (calln, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           proc = $fpc_writeln_end(var Text);
                           left =
                           (callparan, resultdef = Text = "Text", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 1
                              (typeconvn, resultdef = Text = "Text", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                                 (derefn, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    (temprefn, resultdef = Pointer = "^untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                       temptypedef = Pointer = "^untyped", (tempinfo = $000000007EDEC440 flags = [ti_may_be_in_reg])
                                    )
                                 )
                              )

                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                        (tempdeleten, resultdef = $void = "untyped", pos = (95,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           release_to_normal: FALSE, temptypedef = Pointer = "^untyped", temptype = tt_persistent, tempinfo = $000000007EDEC440
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (97,50), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (blockn, resultdef = $void = "untyped", pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (statementn, resultdef = <nil>, pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (nothingn, resultdef = $void = "untyped", pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (blockn, resultdef = $void = "untyped", pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           (statementn, resultdef = <nil>, pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (nothingn, resultdef = $void = "untyped", pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (assignn, resultdef = $void = "untyped", pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 2
                                 (loadn, resultdef = QWord = "QWord", pos = (97,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    nil
                                    symbol = N
                                 )
                                 (ordconstn, resultdef = QWord = "QWord", pos = (97,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 0
                                    value = 0
                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (whilerepeatn, resultdef = $void = "untyped", pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 (gten, resultdef = Boolean = "Boolean", pos = (97,1), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done,nf_internal], cmplx = 2
                                    (loadn, resultdef = QWord = "QWord", pos = (97,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                       nil
                                       symbol = N
                                    )
                                    (ordconstn, resultdef = QWord = "QWord", pos = (97,13), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 1200
                                    )
                                 )
                                 (blockn, resultdef = $void = "untyped", pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 5
                                    (statementn, resultdef = <nil>, pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 5
                                       (nothingn, resultdef = $void = "untyped", pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 5
                                       (assignn, resultdef = $void = "untyped", pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 4
                                          (loadn, resultdef = QWord = "QWord", pos = (97,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                             nil
                                             symbol = N
                                          )
                                          (inlinen, resultdef = QWord = "QWord", pos = (97,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_internal], cmplx = 2, inlinenumber = in_succ_x
                                             (loadn, resultdef = QWord = "QWord", pos = (97,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                nil
                                                symbol = N
                                             )
                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (97,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 1
                                       (blockn, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 1
                                          (statementn, resultdef = <nil>, pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 1
                                             (nothingn, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                             )

                                          )
                                          (statementn, resultdef = <nil>, pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 1
                                             (blockn, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                (statementn, resultdef = <nil>, pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                                                   (nothingn, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                   )

                                                )
                                                (statementn, resultdef = <nil>, pos = (97,35), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                                                   (tempcreaten, resultdef = $void = "untyped", pos = (97,35), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                      size = 8, temptypedef = <no type symbol> = "QWord", tempinfo = $000000007EDEC640
                                                      [ti_may_be_in_reg,ti_const,ti_cleanup_only]
                                                      tempinit =
                                                      (assignn, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 3
                                                         (temprefn, resultdef = <no type symbol> = "QWord", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                            temptypedef = <no type symbol> = "QWord", (tempinfo = $000000007EDEC640 flags = [ti_may_be_in_reg,ti_const,ti_cleanup_only])
                                                         )
                                                         (typeconvn, resultdef = <no type symbol> = "QWord", pos = (97,35), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                                            (loadn, resultdef = QWord = "QWord", pos = (97,35), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                               nil
                                                               symbol = N
                                                            )
                                                         )
                                                      )
                                                   )

                                                )
                                             )

                                          )
                                          (statementn, resultdef = <nil>, pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 1
                                             (assignn, resultdef = $void = "untyped", pos = (97,30), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 1
                                                (vecn, resultdef = QWord = "QWord", pos = (97,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 1
                                                   (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (97,30), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                      nil
                                                      symbol = VETT
                                                   )
                                                   (temprefn, resultdef = <no type symbol> = "QWord", pos = (97,35), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                      temptypedef = <no type symbol> = "QWord", (tempinfo = $000000007EDEC640 flags = [ti_may_be_in_reg,ti_const,ti_cleanup_only])
                                                   )
                                                )
                                                (vecn, resultdef = QWord = "QWord", pos = (97,47), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                   (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (97,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                      nil
                                                      symbol = TOPCICLO
                                                   )
                                                   (temprefn, resultdef = <no type symbol> = "QWord", pos = (97,48), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                      temptypedef = <no type symbol> = "QWord", (tempinfo = $000000007EDEC640 flags = [ti_may_be_in_reg,ti_const,ti_cleanup_only])
                                                   )
                                                )
                                             )

                                          )
                                       )

                                    )
                                 )
                                 nil
                                 nil
                              )

                           )
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (98,24), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (98,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Vettori_boubledec(var MioType_mioarray);
                     left =
                     (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (98,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (98,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = VETT
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (99,29), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (99,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Vettori_azzeradoppivet(var MioType_mioarray);
                     left =
                     (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (99,28), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (99,28), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = VETT
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (100,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (100,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Vettori_boublecre(var MioType_mioarray);
                     left =
                     (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (100,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (100,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = VETT
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (101,9), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (101,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (101,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                        nil
                        symbol = IM
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (101,8), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 1
                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (109,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (blockn, resultdef = $void = "untyped", pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (statementn, resultdef = $void = "untyped", pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        (blockn, resultdef = $void = "untyped", pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           (statementn, resultdef = $void = "untyped", pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (assignn, resultdef = $void = "untyped", pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 2
                                 (loadn, resultdef = QWord = "QWord", pos = (102,8), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    nil
                                    symbol = I
                                 )
                                 (ordconstn, resultdef = QWord = "QWord", pos = (102,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 0
                                    value = 0
                                 )
                              )

                           )
                           (statementn, resultdef = $void = "untyped", pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (whilerepeatn, resultdef = $void = "untyped", pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 (gten, resultdef = Boolean = "Boolean", pos = (102,4), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done,nf_internal], cmplx = 2
                                    (loadn, resultdef = QWord = "QWord", pos = (102,8), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                       nil
                                       symbol = I
                                    )
                                    (ordconstn, resultdef = QWord = "QWord", pos = (102,17), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 1200
                                    )
                                 )
                                 (blockn, resultdef = $void = "untyped", pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                    (statementn, resultdef = <nil>, pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (nothingn, resultdef = $void = "untyped", pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (assignn, resultdef = $void = "untyped", pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 4
                                          (loadn, resultdef = QWord = "QWord", pos = (102,8), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                             nil
                                             symbol = I
                                          )
                                          (inlinen, resultdef = QWord = "QWord", pos = (102,4), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_internal], cmplx = 2, inlinenumber = in_succ_x
                                             (loadn, resultdef = QWord = "QWord", pos = (102,8), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                nil
                                                symbol = I
                                             )
                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (102,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (blockn, resultdef = $void = "untyped", pos = (103,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                          (statementn, resultdef = <nil>, pos = (108,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                             (ifn, resultdef = $void = "untyped", pos = (104,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                (unequaln, resultdef = Boolean = "Boolean", pos = (104,14), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
                                                   (vecn, resultdef = QWord = "QWord", pos = (104,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 2
                                                      (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (104,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                         nil
                                                         symbol = VETT
                                                      )
                                                      (typeconvn, resultdef = <no type symbol> = "QWord", pos = (104,12), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                                         (loadn, resultdef = QWord = "QWord", pos = (104,12), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                            nil
                                                            symbol = I
                                                         )
                                                      )
                                                   )
                                                   (ordconstn, resultdef = QWord = "QWord", pos = (104,16), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                      value = 0
                                                   )
                                                )
                                                (blockn, resultdef = $void = "untyped", pos = (105,8), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 9
                                                   (statementn, resultdef = <nil>, pos = (106,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 9
                                                      (assignn, resultdef = $void = "untyped", pos = (106,13), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 5
                                                         (vecn, resultdef = QWord = "QWord", pos = (106,21), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique], cmplx = 2
                                                            (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (106,13), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                               nil
                                                               symbol = MAXCICLO
                                                            )
                                                            (typeconvn, resultdef = <no type symbol> = "QWord", pos = (106,22), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                                               (loadn, resultdef = QWord = "QWord", pos = (106,22), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                                  nil
                                                                  symbol = IM
                                                               )
                                                            )
                                                         )
                                                         (vecn, resultdef = QWord = "QWord", pos = (106,31), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 2
                                                            (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (106,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                               nil
                                                               symbol = VETT
                                                            )
                                                            (typeconvn, resultdef = <no type symbol> = "QWord", pos = (106,32), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                                               (loadn, resultdef = QWord = "QWord", pos = (106,32), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                                  nil
                                                                  symbol = I
                                                               )
                                                            )
                                                         )
                                                      )

                                                   )
                                                   (statementn, resultdef = <nil>, pos = (107,21), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 4
                                                      (assignn, resultdef = $void = "untyped", pos = (107,13), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                                                         (loadn, resultdef = QWord = "QWord", pos = (107,13), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                            nil
                                                            symbol = IM
                                                         )
                                                         (addn, resultdef = QWord = "QWord", pos = (107,19), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2
                                                            (loadn, resultdef = QWord = "QWord", pos = (107,17), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                               nil
                                                               symbol = IM
                                                            )
                                                            (ordconstn, resultdef = QWord = "QWord", pos = (107,20), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                               value = 1
                                                            )
                                                         )
                                                      )

                                                   )
                                                )
                                                nil
                                                nil
                                             )

                                          )
                                       )

                                    )
                                 )
                                 nil
                                 nil
                              )

                           )
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (110,12), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (110,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                     (loadn, resultdef = QWord = "QWord", pos = (110,4), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                        nil
                        symbol = IM
                     )
                     (subn, resultdef = QWord = "QWord", pos = (110,10), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2
                        (loadn, resultdef = QWord = "QWord", pos = (110,8), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = IM
                        )
                        (ordconstn, resultdef = QWord = "QWord", pos = (110,11), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 1
                        )
                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (111,31), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (111,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Stampa_stampaquattro(var Text);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (111,30), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (111,30), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = TFOUT
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (112,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (112,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (112,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                        nil
                        symbol = M
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (112,6), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 1
                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (117,8), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (whilerepeatn, resultdef = $void = "untyped", pos = (113,2), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (lten, resultdef = Boolean = "Boolean", pos = (113,9), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
                        (loadn, resultdef = QWord = "QWord", pos = (113,8), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = M
                        )
                        (loadn, resultdef = QWord = "QWord", pos = (113,12), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = IM
                        )
                     )
                     (blockn, resultdef = $void = "untyped", pos = (114,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        (statementn, resultdef = <nil>, pos = (115,65), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (calln, resultdef = $void = "untyped", pos = (115,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              proc = Stampa_stampalinea_Semplificatanozero(var Text;var QWord;var MioType_mioarray);
                              left =
                              (callparan, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (115,64), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                 (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (115,64), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                    nil
                                    symbol = MAXCICLO
                                 )

                              )
                              (callparan, resultdef = QWord = "QWord", pos = (115,55), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                 (loadn, resultdef = QWord = "QWord", pos = (115,55), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                    nil
                                    symbol = M
                                 )

                              )
                              (callparan, resultdef = Text = "Text", pos = (115,53), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                 (loadn, resultdef = Text = "Text", pos = (115,53), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                    nil
                                    symbol = TFOUT
                                 )

                              )
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (116,18), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 4
                           (assignn, resultdef = $void = "untyped", pos = (116,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                              (loadn, resultdef = QWord = "QWord", pos = (116,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                 nil
                                 symbol = M
                              )
                              (addn, resultdef = QWord = "QWord", pos = (116,15), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2
                                 (loadn, resultdef = QWord = "QWord", pos = (116,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    nil
                                    symbol = M
                                 )
                                 (ordconstn, resultdef = QWord = "QWord", pos = (116,16), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                    value = 12
                                 )
                              )
                           )

                        )
                     )
                     nil
                     nil
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (118,30), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (118,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Stampa_chiusuralong(var Text);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (118,29), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (118,29), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = TFOUT
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (120,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (120,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (120,1), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                        nil
                        symbol = I
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (120,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 1
                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (121,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (assignn, resultdef = $void = "untyped", pos = (121,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                     (loadn, resultdef = QWord = "QWord", pos = (121,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                        nil
                        symbol = N
                     )
                     (ordconstn, resultdef = QWord = "QWord", pos = (121,4), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 1
                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (122,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (122,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = $fpc_ansistr_assign(var Pointer;Pointer);
                     left =
                     (callparan, resultdef = Pointer = "^untyped", pos = (122,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (typeconvn, resultdef = Pointer = "^untyped", pos = (122,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                           (loadn, resultdef = AnsiString = "AnsiString", pos = (122,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                              nil
                              symbol = LINEA
                           )
                        )

                     )
                     (callparan, resultdef = Pointer = "^untyped", pos = (122,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                        (niln, resultdef = Pointer = "^untyped", pos = (122,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (124,21), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (blockn, resultdef = $void = "untyped", pos = (123,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (blockn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 255
                           (statementn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 proc = $fpc_ansistr_concat(var RawByteString;const RawByteString;const RawByteString;Word);
                                 left =
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                       nil
                                       symbol = LINEA
                                    )

                                 )
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_modify,nf_address_taken], cmplx = 1
                                       nil
                                       symbol = LINEA
                                    )

                                 )
                                 (callparan, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                    (ordconstn, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 0
                                    )

                                 )
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                                    (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                                    )

                                 )
                              )

                           )
                        )

                     )
                     (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (blockn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 255
                           (statementn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 proc = $fpc_ansistr_concat(var RawByteString;const RawByteString;const RawByteString;Word);
                                 left =
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                       nil
                                       symbol = LINEA
                                    )

                                 )
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_modify,nf_address_taken], cmplx = 1
                                       nil
                                       symbol = LINEA
                                    )

                                 )
                                 (callparan, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                    (ordconstn, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 0
                                    )

                                 )
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                                    (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                                    )

                                 )
                              )

                           )
                        )

                     )
                     (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (blockn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 255
                           (statementn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 proc = $fpc_ansistr_concat(var RawByteString;const RawByteString;const RawByteString;Word);
                                 left =
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                       nil
                                       symbol = LINEA
                                    )

                                 )
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_modify,nf_address_taken], cmplx = 1
                                       nil
                                       symbol = LINEA
                                    )

                                 )
                                 (callparan, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                    (ordconstn, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 0
                                    )

                                 )
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                                    (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                                    )

                                 )
                              )

                           )
                        )

                     )
                     (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (blockn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 255
                           (statementn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 proc = $fpc_ansistr_concat(var RawByteString;const RawByteString;const RawByteString;Word);
                                 left =
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                       nil
                                       symbol = LINEA
                                    )

                                 )
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_modify,nf_address_taken], cmplx = 1
                                       nil
                                       symbol = LINEA
                                    )

                                 )
                                 (callparan, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                    (ordconstn, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 0
                                    )

                                 )
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                                    (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                                    )

                                 )
                              )

                           )
                        )

                     )
                     (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (blockn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 255
                           (statementn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 proc = $fpc_ansistr_concat(var RawByteString;const RawByteString;const RawByteString;Word);
                                 left =
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                       nil
                                       symbol = LINEA
                                    )

                                 )
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_modify,nf_address_taken], cmplx = 1
                                       nil
                                       symbol = LINEA
                                    )

                                 )
                                 (callparan, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                    (ordconstn, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 0
                                    )

                                 )
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                                    (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                                    )

                                 )
                              )

                           )
                        )

                     )
                     (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (blockn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 255
                           (statementn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 proc = $fpc_ansistr_concat(var RawByteString;const RawByteString;const RawByteString;Word);
                                 left =
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                       nil
                                       symbol = LINEA
                                    )

                                 )
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_modify,nf_address_taken], cmplx = 1
                                       nil
                                       symbol = LINEA
                                    )

                                 )
                                 (callparan, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                    (ordconstn, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 0
                                    )

                                 )
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                                    (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                                    )

                                 )
                              )

                           )
                        )

                     )
                     (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (blockn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 255
                           (statementn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 proc = $fpc_ansistr_concat(var RawByteString;const RawByteString;const RawByteString;Word);
                                 left =
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                       nil
                                       symbol = LINEA
                                    )

                                 )
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_modify,nf_address_taken], cmplx = 1
                                       nil
                                       symbol = LINEA
                                    )

                                 )
                                 (callparan, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                    (ordconstn, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 0
                                    )

                                 )
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                                    (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                                    )

                                 )
                              )

                           )
                        )

                     )
                     (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (blockn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 255
                           (statementn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 proc = $fpc_ansistr_concat(var RawByteString;const RawByteString;const RawByteString;Word);
                                 left =
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                       nil
                                       symbol = LINEA
                                    )

                                 )
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_modify,nf_address_taken], cmplx = 1
                                       nil
                                       symbol = LINEA
                                    )

                                 )
                                 (callparan, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                    (ordconstn, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 0
                                    )

                                 )
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                                    (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                                    )

                                 )
                              )

                           )
                        )

                     )
                     (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (blockn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 255
                           (statementn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 proc = $fpc_ansistr_concat(var RawByteString;const RawByteString;const RawByteString;Word);
                                 left =
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                       nil
                                       symbol = LINEA
                                    )

                                 )
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_modify,nf_address_taken], cmplx = 1
                                       nil
                                       symbol = LINEA
                                    )

                                 )
                                 (callparan, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                    (ordconstn, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 0
                                    )

                                 )
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                                    (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                                    )

                                 )
                              )

                           )
                        )

                     )
                     (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (blockn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 255
                           (statementn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 proc = $fpc_ansistr_concat(var RawByteString;const RawByteString;const RawByteString;Word);
                                 left =
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                       nil
                                       symbol = LINEA
                                    )

                                 )
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_modify,nf_address_taken], cmplx = 1
                                       nil
                                       symbol = LINEA
                                    )

                                 )
                                 (callparan, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                    (ordconstn, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 0
                                    )

                                 )
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                                    (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                                    )

                                 )
                              )

                           )
                        )

                     )
                     (statementn, resultdef = $void = "untyped", pos = (123,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (blockn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_no_lvalue], cmplx = 255
                           (statementn, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (calln, resultdef = $void = "untyped", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 proc = $fpc_ansistr_concat(var RawByteString;const RawByteString;const RawByteString;Word);
                                 left =
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                                       nil
                                       symbol = LINEA
                                    )

                                 )
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_modify,nf_address_taken], cmplx = 1
                                       nil
                                       symbol = LINEA
                                    )

                                 )
                                 (callparan, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                    (ordconstn, resultdef = Word = "Word", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                       value = 0
                                    )

                                 )
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                                    (stringconstn, resultdef = AnsiString = "AnsiString", pos = (124,1), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                                    )

                                 )
                              )

                           )
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (125,2), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (125,2), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = $fpc_ansistr_concat(var RawByteString;const RawByteString;const RawByteString;Word);
                     left =
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (125,2), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = RawByteString = "AnsiString", pos = (125,2), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = LINEA
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (125,2), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = RawByteString = "AnsiString", pos = (125,2), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = LINEA
                        )

                     )
                     (callparan, resultdef = Word = "Word", pos = (125,2), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                        (ordconstn, resultdef = Word = "Word", pos = (125,2), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 0
                        )

                     )
                     (callparan, resultdef = RawByteString = "AnsiString", pos = (125,2), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (125,2), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (126,28), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (126,2), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Stampa_stampacinque(var Text);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (126,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (126,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = TFOUT
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (151,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (whilerepeatn, resultdef = $void = "untyped", pos = (127,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (lten, resultdef = Boolean = "Boolean", pos = (127,9), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 3
                        (loadn, resultdef = QWord = "QWord", pos = (127,7), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = I
                        )
                        (loadn, resultdef = QWord = "QWord", pos = (127,12), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = IM
                        )
                     )
                     (blockn, resultdef = $void = "untyped", pos = (128,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        (statementn, resultdef = <nil>, pos = (129,26), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (blockn, resultdef = $void = "untyped", pos = (129,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (statementn, resultdef = <nil>, pos = (129,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (nothingn, resultdef = $void = "untyped", pos = (129,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (129,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (calln, resultdef = $void = "untyped", pos = (129,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                    proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                                    left =
                                    (callparan, resultdef = Text = "Text", pos = (129,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                       (loadn, resultdef = Text = "Text", pos = (129,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                                          nil
                                          symbol = TFOUT
                                       )

                                    )
                                    (callparan, resultdef = ShortString = "ShortString", pos = (129,25), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                                       (stringconstn, resultdef = ShortString = "ShortString", pos = (129,25), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                                       )

                                    )
                                    (callparan, resultdef = LongInt = "LongInt", pos = (129,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                       (ordconstn, resultdef = LongInt = "LongInt", pos = (129,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                          value = 0
                                       )

                                    )
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (129,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (calln, resultdef = $void = "untyped", pos = (129,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                    proc = $fpc_writeln_end(var Text);
                                    left =
                                    (callparan, resultdef = Text = "Text", pos = (129,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                       (loadn, resultdef = Text = "Text", pos = (129,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                                          nil
                                          symbol = TFOUT
                                       )

                                    )
                                 )

                              )
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (130,33), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (blockn, resultdef = $void = "untyped", pos = (130,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (statementn, resultdef = <nil>, pos = (130,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (nothingn, resultdef = $void = "untyped", pos = (130,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (130,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (calln, resultdef = $void = "untyped", pos = (130,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                    proc = $fpc_write_text_uint(LongInt;var Text;QWord);
                                    left =
                                    (callparan, resultdef = QWord = "QWord", pos = (130,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 3
                                       (vecn, resultdef = QWord = "QWord", pos = (130,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 2
                                          (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (130,15), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                             nil
                                             symbol = MAXCICLO
                                          )
                                          (typeconvn, resultdef = <no type symbol> = "QWord", pos = (130,24), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                             (loadn, resultdef = QWord = "QWord", pos = (130,24), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                nil
                                                symbol = I
                                             )
                                          )
                                       )

                                    )
                                    (callparan, resultdef = Text = "Text", pos = (130,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                       (loadn, resultdef = Text = "Text", pos = (130,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                                          nil
                                          symbol = TFOUT
                                       )

                                    )
                                    (callparan, resultdef = LongInt = "LongInt", pos = (130,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                       (ordconstn, resultdef = LongInt = "LongInt", pos = (130,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                          value = 0
                                       )

                                    )
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (130,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (calln, resultdef = $void = "untyped", pos = (130,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                    proc = $fpc_write_text_ansistr(LongInt;var Text;const RawByteString);
                                    left =
                                    (callparan, resultdef = RawByteString = "AnsiString", pos = (130,32), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                       (loadn, resultdef = RawByteString = "AnsiString", pos = (130,32), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                          nil
                                          symbol = LINEA
                                       )

                                    )
                                    (callparan, resultdef = Text = "Text", pos = (130,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                       (loadn, resultdef = Text = "Text", pos = (130,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                                          nil
                                          symbol = TFOUT
                                       )

                                    )
                                    (callparan, resultdef = LongInt = "LongInt", pos = (130,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                       (ordconstn, resultdef = LongInt = "LongInt", pos = (130,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                          value = 0
                                       )

                                    )
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (130,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (calln, resultdef = $void = "untyped", pos = (130,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                    proc = $fpc_writeln_end(var Text);
                                    left =
                                    (callparan, resultdef = Text = "Text", pos = (130,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                       (loadn, resultdef = Text = "Text", pos = (130,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                                          nil
                                          symbol = TFOUT
                                       )

                                    )
                                 )

                              )
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (146,9), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (blockn, resultdef = $void = "untyped", pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (statementn, resultdef = <nil>, pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (nothingn, resultdef = $void = "untyped", pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (blockn, resultdef = $void = "untyped", pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                    (statementn, resultdef = <nil>, pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (nothingn, resultdef = $void = "untyped", pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (assignn, resultdef = $void = "untyped", pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 2
                                          (loadn, resultdef = QWord = "QWord", pos = (131,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                             nil
                                             symbol = M
                                          )
                                          (ordconstn, resultdef = QWord = "QWord", pos = (131,6), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 0
                                             value = 0
                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                       (whilerepeatn, resultdef = $void = "untyped", pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                          (gten, resultdef = Boolean = "Boolean", pos = (131,6), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done,nf_internal], cmplx = 2
                                             (loadn, resultdef = QWord = "QWord", pos = (131,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                nil
                                                symbol = M
                                             )
                                             (ordconstn, resultdef = QWord = "QWord", pos = (131,19), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                value = 1200
                                             )
                                          )
                                          (blockn, resultdef = $void = "untyped", pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                             (statementn, resultdef = <nil>, pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (nothingn, resultdef = $void = "untyped", pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (assignn, resultdef = $void = "untyped", pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_internal], cmplx = 4
                                                   (loadn, resultdef = QWord = "QWord", pos = (131,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                      nil
                                                      symbol = M
                                                   )
                                                   (inlinen, resultdef = QWord = "QWord", pos = (131,6), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_internal], cmplx = 2, inlinenumber = in_succ_x
                                                      (loadn, resultdef = QWord = "QWord", pos = (131,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                         nil
                                                         symbol = M
                                                      )
                                                   )
                                                )

                                             )
                                             (statementn, resultdef = <nil>, pos = (131,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                (blockn, resultdef = $void = "untyped", pos = (132,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                   (statementn, resultdef = <nil>, pos = (145,25), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                      (ifn, resultdef = $void = "untyped", pos = (133,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                         (equaln, resultdef = Boolean = "Boolean", pos = (133,25), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 5
                                                            (vecn, resultdef = QWord = "QWord", pos = (133,22), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 2
                                                               (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (133,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                                  nil
                                                                  symbol = TOPCICLO
                                                               )
                                                               (typeconvn, resultdef = <no type symbol> = "QWord", pos = (133,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                                                  (loadn, resultdef = QWord = "QWord", pos = (133,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                                     nil
                                                                     symbol = M
                                                                  )
                                                               )
                                                            )
                                                            (vecn, resultdef = QWord = "QWord", pos = (133,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 2
                                                               (loadn, resultdef = MioType_mioarray = "Array[1..1200] Of QWord", pos = (133,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                                  nil
                                                                  symbol = MAXCICLO
                                                               )
                                                               (typeconvn, resultdef = <no type symbol> = "QWord", pos = (133,35), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_int_2_int, convnodeflags = []
                                                                  (loadn, resultdef = QWord = "QWord", pos = (133,35), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                                                     nil
                                                                     symbol = I
                                                                  )
                                                               )
                                                            )
                                                         )
                                                         (ifn, resultdef = $void = "untyped", pos = (135,15), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                            (lten, resultdef = Boolean = "Boolean", pos = (135,19), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
                                                               (loadn, resultdef = QWord = "QWord", pos = (135,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                                  nil
                                                                  symbol = N
                                                               )
                                                               (ordconstn, resultdef = QWord = "QWord", pos = (135,22), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                                  value = 12
                                                               )
                                                            )
                                                            (blockn, resultdef = $void = "untyped", pos = (137,22), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                               (statementn, resultdef = <nil>, pos = (138,78), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                                  (ifn, resultdef = $void = "untyped", pos = (138,26), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                                     (ltn, resultdef = Boolean = "Boolean", pos = (138,30), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
                                                                        (loadn, resultdef = QWord = "QWord", pos = (138,29), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                                           nil
                                                                           symbol = N
                                                                        )
                                                                        (ordconstn, resultdef = QWord = "QWord", pos = (138,31), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                                           value = 12
                                                                        )
                                                                     )
                                                                     (blockn, resultdef = $void = "untyped", pos = (138,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                                        (statementn, resultdef = <nil>, pos = (138,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                                           (nothingn, resultdef = $void = "untyped", pos = (138,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                                           )

                                                                        )
                                                                        (statementn, resultdef = <nil>, pos = (138,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                                           (calln, resultdef = $void = "untyped", pos = (138,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                                              proc = $fpc_write_text_uint(LongInt;var Text;QWord);
                                                                              left =
                                                                              (callparan, resultdef = QWord = "QWord", pos = (138,52), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                                                                 (loadn, resultdef = QWord = "QWord", pos = (138,52), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                                                    nil
                                                                                    symbol = M
                                                                                 )

                                                                              )
                                                                              (callparan, resultdef = Text = "Text", pos = (138,50), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                                                                 (loadn, resultdef = Text = "Text", pos = (138,50), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                                                                                    nil
                                                                                    symbol = TFOUT
                                                                                 )

                                                                              )
                                                                              (callparan, resultdef = LongInt = "LongInt", pos = (138,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                                                 (ordconstn, resultdef = LongInt = "LongInt", pos = (138,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                                                    value = 0
                                                                                 )

                                                                              )
                                                                           )

                                                                        )
                                                                        (statementn, resultdef = <nil>, pos = (138,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                                           (calln, resultdef = $void = "untyped", pos = (138,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                                              proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                                                                              left =
                                                                              (callparan, resultdef = Text = "Text", pos = (138,50), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                                                                 (loadn, resultdef = Text = "Text", pos = (138,50), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                                                                                    nil
                                                                                    symbol = TFOUT
                                                                                 )

                                                                              )
                                                                              (callparan, resultdef = ShortString = "ShortString", pos = (138,57), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                                                                                 (stringconstn, resultdef = ShortString = "ShortString", pos = (138,57), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                                                                                 )

                                                                              )
                                                                              (callparan, resultdef = LongInt = "LongInt", pos = (138,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                                                 (ordconstn, resultdef = LongInt = "LongInt", pos = (138,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                                                    value = 0
                                                                                 )

                                                                              )
                                                                           )

                                                                        )
                                                                        (statementn, resultdef = <nil>, pos = (138,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                                           (calln, resultdef = $void = "untyped", pos = (138,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                                              proc = $fpc_write_end(var Text);
                                                                              left =
                                                                              (callparan, resultdef = Text = "Text", pos = (138,50), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                                                                 (loadn, resultdef = Text = "Text", pos = (138,50), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                                                                                    nil
                                                                                    symbol = TFOUT
                                                                                 )

                                                                              )
                                                                           )

                                                                        )
                                                                     )
                                                                     (blockn, resultdef = $void = "untyped", pos = (138,64), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                                        (statementn, resultdef = <nil>, pos = (138,64), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                                           (nothingn, resultdef = $void = "untyped", pos = (138,64), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                                           )

                                                                        )
                                                                        (statementn, resultdef = <nil>, pos = (138,64), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                                           (calln, resultdef = $void = "untyped", pos = (138,64), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                                              proc = $fpc_write_text_uint(LongInt;var Text;QWord);
                                                                              left =
                                                                              (callparan, resultdef = QWord = "QWord", pos = (138,77), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                                                                 (loadn, resultdef = QWord = "QWord", pos = (138,77), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                                                    nil
                                                                                    symbol = M
                                                                                 )

                                                                              )
                                                                              (callparan, resultdef = Text = "Text", pos = (138,75), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                                                                 (loadn, resultdef = Text = "Text", pos = (138,75), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                                                                                    nil
                                                                                    symbol = TFOUT
                                                                                 )

                                                                              )
                                                                              (callparan, resultdef = LongInt = "LongInt", pos = (138,64), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                                                 (ordconstn, resultdef = LongInt = "LongInt", pos = (138,64), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                                                    value = 0
                                                                                 )

                                                                              )
                                                                           )

                                                                        )
                                                                        (statementn, resultdef = <nil>, pos = (138,64), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                                           (calln, resultdef = $void = "untyped", pos = (138,64), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                                              proc = $fpc_write_end(var Text);
                                                                              left =
                                                                              (callparan, resultdef = Text = "Text", pos = (138,75), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                                                                 (loadn, resultdef = Text = "Text", pos = (138,75), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                                                                                    nil
                                                                                    symbol = TFOUT
                                                                                 )

                                                                              )
                                                                           )

                                                                        )
                                                                     )
                                                                     nil
                                                                  )

                                                               )
                                                               (statementn, resultdef = <nil>, pos = (140,22), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 4
                                                                  (assignn, resultdef = $void = "untyped", pos = (139,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                                                                     (loadn, resultdef = QWord = "QWord", pos = (139,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                                        nil
                                                                        symbol = N
                                                                     )
                                                                     (addn, resultdef = QWord = "QWord", pos = (139,31), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2
                                                                        (loadn, resultdef = QWord = "QWord", pos = (139,30), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                                                           nil
                                                                           symbol = N
                                                                        )
                                                                        (ordconstn, resultdef = QWord = "QWord", pos = (139,32), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                                           value = 1
                                                                        )
                                                                     )
                                                                  )

                                                               )
                                                            )
                                                            (blockn, resultdef = $void = "untyped", pos = (142,22), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                               (statementn, resultdef = <nil>, pos = (143,31), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                                  (assignn, resultdef = $void = "untyped", pos = (143,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                                                                     (loadn, resultdef = QWord = "QWord", pos = (143,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                                                        nil
                                                                        symbol = N
                                                                     )
                                                                     (ordconstn, resultdef = QWord = "QWord", pos = (143,30), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                                        value = 1
                                                                     )
                                                                  )

                                                               )
                                                               (statementn, resultdef = <nil>, pos = (144,46), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                                  (blockn, resultdef = $void = "untyped", pos = (144,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                                     (statementn, resultdef = <nil>, pos = (144,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                                        (nothingn, resultdef = $void = "untyped", pos = (144,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                                                        )

                                                                     )
                                                                     (statementn, resultdef = <nil>, pos = (144,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                                        (calln, resultdef = $void = "untyped", pos = (144,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                                           proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                                                                           left =
                                                                           (callparan, resultdef = Text = "Text", pos = (144,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                                                              (loadn, resultdef = Text = "Text", pos = (144,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                                                                                 nil
                                                                                 symbol = TFOUT
                                                                              )

                                                                           )
                                                                           (callparan, resultdef = ShortString = "ShortString", pos = (144,45), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                                                                              (stringconstn, resultdef = ShortString = "ShortString", pos = (144,45), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                                                                              )

                                                                           )
                                                                           (callparan, resultdef = LongInt = "LongInt", pos = (144,27), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                                                              (ordconstn, resultdef = LongInt = "LongInt", pos = (144,27), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                                                                 value = 0
                                                                              )

                                                                           )
                                                                        )

                                                                     )
                                                                     (statementn, resultdef = <nil>, pos = (144,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                                                        (calln, resultdef = $void = "untyped", pos = (144,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                                                           proc = $fpc_writeln_end(var Text);
                                                                           left =
                                                                           (callparan, resultdef = Text = "Text", pos = (144,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                                                              (loadn, resultdef = Text = "Text", pos = (144,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                                                                                 nil
                                                                                 symbol = TFOUT
                                                                              )

                                                                           )
                                                                        )

                                                                     )
                                                                  )

                                                               )
                                                            )
                                                            nil
                                                         )
                                                         nil
                                                         nil
                                                      )

                                                   )
                                                )

                                             )
                                          )
                                          nil
                                          nil
                                       )

                                    )
                                 )

                              )
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (148,14), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (assignn, resultdef = $void = "untyped", pos = (148,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
                              (loadn, resultdef = QWord = "QWord", pos = (148,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                                 nil
                                 symbol = N
                              )
                              (ordconstn, resultdef = QWord = "QWord", pos = (148,13), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                 value = 1
                              )
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (149,16), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (assignn, resultdef = $void = "untyped", pos = (149,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
                              (loadn, resultdef = QWord = "QWord", pos = (149,10), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                 nil
                                 symbol = I
                              )
                              (addn, resultdef = QWord = "QWord", pos = (149,14), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 2
                                 (loadn, resultdef = QWord = "QWord", pos = (149,13), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                    nil
                                    symbol = I
                                 )
                                 (ordconstn, resultdef = QWord = "QWord", pos = (149,15), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                    value = 1
                                 )
                              )
                           )

                        )
                        (statementn, resultdef = <nil>, pos = (150,29), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (blockn, resultdef = $void = "untyped", pos = (150,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (statementn, resultdef = <nil>, pos = (150,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (nothingn, resultdef = $void = "untyped", pos = (150,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (150,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (calln, resultdef = $void = "untyped", pos = (150,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                    proc = $fpc_write_text_shortstr(LongInt;var Text;const ShortString);
                                    left =
                                    (callparan, resultdef = Text = "Text", pos = (150,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                       (loadn, resultdef = Text = "Text", pos = (150,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                                          nil
                                          symbol = TFOUT
                                       )

                                    )
                                    (callparan, resultdef = ShortString = "ShortString", pos = (150,28), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [], cmplx = 1
                                       (stringconstn, resultdef = ShortString = "ShortString", pos = (150,28), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done], cmplx = 1
                                       )

                                    )
                                    (callparan, resultdef = LongInt = "LongInt", pos = (150,10), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                                       (ordconstn, resultdef = LongInt = "LongInt", pos = (150,10), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                          value = 0
                                       )

                                    )
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (150,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (calln, resultdef = $void = "untyped", pos = (150,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                    proc = $fpc_writeln_end(var Text);
                                    left =
                                    (callparan, resultdef = Text = "Text", pos = (150,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                       (loadn, resultdef = Text = "Text", pos = (150,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                                          nil
                                          symbol = TFOUT
                                       )

                                    )
                                 )

                              )
                           )

                        )
                     )
                     nil
                     nil
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (152,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (152,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Stampa_chiusuralong(var Text);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (152,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (152,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = TFOUT
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (153,20), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (153,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = CloseFile(var Text);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (153,19), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (153,19), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = TFCSVOUT
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (154,23), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (154,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = CloseFile(var Text);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (154,22), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (154,22), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = TFCSVTOPOUT
                        )

                     )
                  )

               )
               (statementn, resultdef = $void = "untyped", pos = (155,17), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (155,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = CloseFile(var Text);
                     left =
                     (callparan, resultdef = Text = "Text", pos = (155,16), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = Text = "Text", pos = (155,16), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify,nf_address_taken], cmplx = 1
                           nil
                           symbol = TFOUT
                        )

                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (156,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (156,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (156,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (156,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (156,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (156,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
      (blockn, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
         (statementn, resultdef = <nil>, pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
            (nothingn, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
            (tempdeleten, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               release_to_normal: FALSE, temptypedef = <no type symbol> = "^MioType_mioarray", temptype = tt_persistent, tempinfo = $000000007EDEC5C0
            )

         )
         (statementn, resultdef = <nil>, pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
            (tempdeleten, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               release_to_normal: FALSE, temptypedef = <no type symbol> = "QWord", temptype = tt_persistent, tempinfo = $000000007EDEC640
            )

         )
      )

   )
)

*******************************************************************************
after the firstpass
$P$CICLICOLLATZTOP_$$_init_implicit$; Register;
*******************************************************************************
(nothingn, resultdef = $void = "untyped", pos = (156,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 0
)

*******************************************************************************
right before code generation
$P$CICLICOLLATZTOP_$$_init_implicit$; Register;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
   (statementn, resultdef = <nil>, pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (nothingn, resultdef = $void = "untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
      )

   )
   (statementn, resultdef = <nil>, pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (156,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
      (blockn, resultdef = $void = "untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
         nil
      )

   )
)

*******************************************************************************
after the firstpass
$P$CICLICOLLATZTOP_$$_finalize_implicit$; Register;
*******************************************************************************
(nothingn, resultdef = $void = "untyped", pos = (156,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 0
)

*******************************************************************************
right before code generation
$P$CICLICOLLATZTOP_$$_finalize_implicit$; Register;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
   (statementn, resultdef = <nil>, pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (nothingn, resultdef = $void = "untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
      )

   )
   (statementn, resultdef = <nil>, pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (statementn, resultdef = <nil>, pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (nothingn, resultdef = $void = "untyped", pos = (156,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 0
            )

         )
         (statementn, resultdef = <nil>, pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (blockn, resultdef = $void = "untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (asmn, resultdef = $void = "untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
            )

         )
         (statementn, resultdef = <nil>, pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               proc = $fpc_ansistr_decr_ref(var Pointer);
               left =
               (callparan, resultdef = Pointer = "^untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                  (typeconvn, resultdef = Pointer = "^untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], cmplx = 1, convtype = tc_equal, convnodeflags = []
                     (loadn, resultdef = AnsiString = "AnsiString", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify], cmplx = 1
                        nil
                        symbol = LINEA
                     )
                  )

               )
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
      (blockn, resultdef = $void = "untyped", pos = (0,0), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
         nil
      )

   )
)
